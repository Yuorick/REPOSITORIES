//---------------------------------------------------------------------------


#pragma hdrstop

#include "Helic.h"


__fastcall  THelic::THelic()
{
// лопасть винта
	 mBlade = TBlade();
	// частота вращениеия винта
	 mBladeOmega = 0.;
	// масса вертолетв
	 mHelicMass = 0.;
	// к-во лопастей
	 mQuantBlades = 0;
}
// Конструктор копирования
__fastcall  THelic::THelic (const THelic &R)
 {
	 mBlade = R.mBlade;
	 mBladeOmega   = R.mBladeOmega ;
	 mHelicMass  = R.mHelicMass ;
	 mQuantBlades = R.mQuantBlades ;
 }
 // оператор присваивания
  THelic THelic::operator=(THelic  R)
 {
	 mBlade = R.mBlade;
	 mBladeOmega   = R.mBladeOmega ;
	 mHelicMass  = R.mHelicMass ;
	 mQuantBlades = R.mQuantBlades ;
	 return *this ;
 }

 // парам констр 1
 __fastcall THelic::THelic(const TBlade Blade,const double BladeOmega
   ,const double HelicMass, const double QuantBlades)
 {
	 mBlade = Blade;
	 mBladeOmega = BladeOmega;
	 mHelicMass = HelicMass ;
	 mQuantBlades = QuantBlades;
 }
 //-------------------------------------------------------
 //---------------------------------------------------------------------------
// вычисление константы Ct по данным РЛЭ
// задана точка еа высоте висения (максимальной), масса вертолета, температура у поверхнсти земли
// требуется накйти константу Ct
	// TKel0 - температура на поверхности земли, град Кельвина
	// HeliH -  высота  висения, м
	// BladeOmega  - частота вращениеия винта
double THelic::calcCt(const double TKel0,const double HeliH)
{
	  double valTKel = TKel0  - 0.0065 * 5500;
	  double valTCel = valTKel- 273.15;
	  double valPAm = 101325. * exp(log(valTKel/ TKel0) * 9.81* 0.028964/ 8.31/ 0.0065);
	  double valRo =   valPAm * 0.028964/8.31/  valTKel;
	  double valCt = 2.* 9.81 * mHelicMass/
	  (valRo   *M_PI * mBlade.mBladeR * mBlade.mBladeR *mBlade.mBladeR *mBlade.mBladeR
			*mBlade.mBladeOmega * mBlade.mBladeOmega);
	  return valCt;
}
//--------------------------------------------------------------
//-------------------------------------------------------------
// вычисление коэффициента подъемной силы лопасти  по данным РЛЭ
// VAlR - радиус ометаемой площади
// VAlRadHorizHsarnir - радиус горизоньтального шарнира
// VAlPofile_d0 - высота профиля вертикального сечения лопасти  в точке ближайшей к центру вращения
// VAlPofile_d1 - высота профиля вертикального сечения лопасти  в дальней точке от центра вращения
// VAlM - масса лопасти
double calc_C_y_alfa(const double TKel0,const double HeliH, const double BladeOmega
	, const double BladeR , const double VAlRadHorizHsarnir, const double VAlBlade_b
	, const int QUantBlades, const	double HelicMass)
{
	double valTKel = TKel0  - 0.0065 * 5500;
	double valTCel = valTKel- 273.15;
	double valPAm = 101325. * exp(log(valTKel/ TKel0) * 9.81* 0.028964/ 8.31/ 0.0065);
	double valRo =   valPAm * 0.028964/8.31/  valTKel;
	double valFiMax = 15./180. * M_PI; // максимальный шаг 15 град
	double valBladeS =  VAlBlade_b * (BladeR - VAlRadHorizHsarnir);
	double valC_y_alfa = 2. * HelicMass * 9.81
	/ (((double)QUantBlades) * valFiMax * valRo * valBladeS *BladeR *BladeR
			*BladeOmega *BladeOmega );
   return valC_y_alfa ;
}
#pragma package(smart_init)
