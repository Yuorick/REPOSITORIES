//---------------------------------------------------------------------------


#pragma hdrstop

#include "Processing.h"

#include "Diagr.h"
#include "Faceta.h"
#include "Far.h"
//---------------------------------------------------------------------------

#include <vcl.h>

#pragma hdrstop
#include <math.h>
#include "Comp.h"
#include <stdio.h>
#include <stdlib.h>
#include "YrWriteShapeFile.h"
#include "URPolyLine.h"
#include "UrPointXY.h"
 TProcessing::~TProcessing()
{

 if(mparrCmpElCurrent)
 {
	 free (mparrCmpElCurrent);
 }
}
// valTetScanRadian - угол поворота направления максимума
 TProcessing::TProcessing(const double valTetScanRadian)
{

 //Фар
  mFar = TFar();
 // массив токов по модулям
  mparrCmpElCurrent = (TComp*)malloc(mFar.m_N * sizeof(TComp));
   double delFi =  -mFar.m_D * sin(valTetScanRadian)/ 2./ mFar.mLambda * 2. * M_PI;

  mparrCmpElCurrent[0] = TComp:: exp_(-3. *delFi);
  mparrCmpElCurrent[1] = TComp:: exp_(-delFi);
  mparrCmpElCurrent[2] = TComp:: exp_(delFi);
  mparrCmpElCurrent[3] = TComp:: exp_(3.* delFi);
  TComp cmp(0.25,0.);

  for (int i=0; i < 4; i++)
  {
	mparrCmpElCurrent[i] *= cmp;
  }
}

TProcessing::TProcessing()
{
 // количество модулей (фасет)
  mFar.m_N = 4;
 // расстояние между модулями
   mFar.m_D = 32.8;
 // длина волны
   mFar.mLambda = 3.15;;
 // массив фасет
  mFar.mFaceta = TFaceta();
 // массив токов по модулям
  mparrCmpElCurrent = (TComp*)malloc(mFar.m_N * sizeof(TComp));
   double delFi =  mFar.m_D * sin(0.01)/ 2./ mFar.mLambda * 2. * M_PI;

  mparrCmpElCurrent[0] = TComp:: exp_(-3. *delFi);
  mparrCmpElCurrent[1] = TComp:: exp_(-delFi);
  mparrCmpElCurrent[2] = TComp:: exp_(delFi);
  mparrCmpElCurrent[3] = TComp:: exp_(3.* delFi);
  TComp cmp(0.25,0.);

  for (int i=0; i < 4; i++)
  {
	mparrCmpElCurrent[i] *= cmp;
  }
}
// Конструктор копирования
TProcessing::TProcessing (const TProcessing &R2)
 {
 //
  mFar = R2.mFar;


  if (mparrCmpElCurrent)
  {
	free (mparrCmpElCurrent);
	mparrCmpElCurrent = NULL;
  }
  if (R2.mparrCmpElCurrent)
  {
   mparrCmpElCurrent = (TComp*)malloc(mFar.m_N * sizeof(TComp));
   memcpy(mparrCmpElCurrent, R2.mparrCmpElCurrent,mFar.m_N * sizeof(TComp));
  }

 }

 // оператор присваивания
 TProcessing TProcessing::operator=(TProcessing  R2)
{
 //
  mFar = R2.mFar;


  if (mparrCmpElCurrent)
  {
	free (mparrCmpElCurrent);
	mparrCmpElCurrent = NULL;
  }
  if (R2.mparrCmpElCurrent)
  {
   mparrCmpElCurrent = (TComp*)malloc(mFar.m_N * sizeof(TComp));
   memcpy(mparrCmpElCurrent, R2.mparrCmpElCurrent,mFar.m_N * sizeof(TComp));
  }

	return *this ;
}


// парам констр
  TProcessing::TProcessing(const TFar Far, TComp *parrCmpElCurrent)
 {
	 mFar = Far ;
	 if (parrCmpElCurrent)
	 {
		mparrCmpElCurrent =  (TComp *)malloc( Far.m_N * sizeof(TComp));
		memcpy(mparrCmpElCurrent, parrCmpElCurrent, Far.m_N * sizeof(TComp));
	 }

 }




 TComp _fastcall TProcessing::fncF (const double tet)
{
  TComp cmpRez(0.,0.) ;
  TComp delFas(0.,  mFar.m_D * sin(tet)/ 2./ mFar.mLambda * 2. * M_PI);

  TComp delFas0(0.,  mFar.m_D * sin(tet)/ 2./ mFar.mLambda * 2. * M_PI * ((double)(mFar.m_N -1)));//11111111!!!
  for (int i = 0; i < mFar.m_N; i++)
  {
	TComp cmpTemp;
	double valS =  mFar.mFaceta.fncFFaceta(tet);
	TComp cmpFasCur ( 0.,((double)i) * 2. * delFas.m_Im+delFas0.m_Im);
	TComp cmpTemp1 = TComp::exp_(cmpFasCur);
	cmpTemp.m_Re = cmpTemp1.m_Re * valS;
	cmpTemp.m_Im = cmpTemp1.m_Im * valS;
	cmpTemp *=  mparrCmpElCurrent[i] ;
	cmpRez += cmpTemp ;
  }
  return  cmpRez;
}

void  _fastcall TProcessing::createProcessingGraphs(wchar_t *wchFoldName1 )
{

	wchar_t wchFoldName[300] ={0};
	wcscpy(  wchFoldName,  wchFoldName1);
	wcscat(wchFoldName, L"\\");
	double step = M_PI / 3000./ 10.;
	const int nBuffRows = 1500 *2;
	const int nBuffCols = 4;
	double  *parrBuff = new double [nBuffRows  * nBuffCols] ;
	memset(parrBuff, 0, nBuffRows * nBuffCols * sizeof(double));

	const int lenName = 30;
	wchar_t wcharrFileNames [120] ={0};
	wcscpy( wcharrFileNames, L"Tetta");
	wcscpy( &wcharrFileNames[30], L"ModF");
	wcscpy( &wcharrFileNames[60], L"F_Re");
	wcscpy( &wcharrFileNames[90], L"F_Im");
  for (int i=0 ; i < nBuffRows; i++)
  {
   double tet = step * ((double) (-nBuffRows/2 +i));
   parrBuff[ i * nBuffCols] = tet ;

   TComp cmp = fncF( tet);
   parrBuff[ i * nBuffCols + 1]= cmp.modul();
   parrBuff[ i * nBuffCols + 2]= cmp.m_Re;
   parrBuff[ i * nBuffCols + 3]= cmp.m_Im;

  }

  double scaley = 100.;
  for (int i=1; i < nBuffCols; i++)
  {

  TYrWriteShapeFile::WriteOneReport(                 wchFoldName  // путь к папке
								  , parrBuff // массив с информацией - матрица nBuffRows x nBuffCols
								  , nBuffCols // - к-во переменных о корорых накоплена информация в буфере
								  , nBuffRows //  - к-во точек
								  ,wcharrFileNames //матрица с именаими переменных - матрица nBuffCols x lenName
								  ,lenName // максимальная длина имени переменной
								  ,0  // номер переменной по оси X
								  ,i  // номер переменной по оси Y
								  ,1000. //  масштаб по оси X
								  ,scaley // масштаб по оси Y
								   ) ;
  }

	delete parrBuff;
	wchar_t wchAxesFileName[300] ={0};
	wcscpy(  wchAxesFileName,  wchFoldName);
	wcscat(wchAxesFileName, L"AxesArr.shp");
	TYrWriteShapeFile::CreateShpArrowedAxes(wchAxesFileName,-150., 150.
	 ,-scaley * 1.1,scaley * 1.1, 50000.*step) ;
	TURPointXY pPoints[2];
	pPoints[0] =  TURPointXY (-100., scaley * sqrt(2.)/2.);
	pPoints[1] =  TURPointXY (100., scaley * sqrt(2.)/2.);
	TURPolyLine pln( pPoints,2) ;

	wcscpy(  wchAxesFileName,  wchFoldName);
	wcscat(wchAxesFileName, L"Line0.shp");
	TURPolyLine::WriteSetSHPFiles(wchAxesFileName,&pln, 1) ;
 }


#pragma package(smart_init)
