//---------------------------------------------------------------------------

#ifndef TraceFltH
#define TraceFltH
//---------------------------------------------------------------------------
class TTraceFlt
{
public:
  // константы
  // 1. скз оценки курсового угла
 // mSigQ;
  // 2. скз оценки  угла килеквой качки
 // mSigPsi;
  // 3. скз оценки  угла кормовой  качки
 // mSigTet;
  // 4. скз оценки скорости изменения курсового угла
 // mSigVQ;
  // 5.  скз оценки скорости изменения угла килеквой качки
//  mSigVPsi;
  // 6.  скз оценки скорости изменения угла кормовой качки
 // mSigVTet ;
  // 7. скз ошибки измерения курсового угла антенны
//  mSigBet;
  // 8.  скз ошибки измерения  угла места антенны
//  mSigEps;
  // 9. СКЗ флуктуационная ошибка ищзмерения угла V
//  mSigV;
  // 10. СКЗ флуктуационная ошибка ищзмерения угла U
//  mSigU
  // 11.  СКЗ флуктуационная ошибка ищзмерения дальности
//  mSigR;
  // 12  вектор параллакса антенны
 // double marrPar[3];

 // Динамическая информация
//  1.Время привязки оценок вектора состояния
	double mTf;
//  2.Оенка вектора состояния в КГСК на момент mTf
	double marrVS_KGSK[6];
//  3.Оенка вектора состояния в АСК на момент mTf
	double marrVS_ASK[6];
//  4.Объединенная корреляционная матрица ошибок оценивания в КГСК
	double marrK_KGSK [36];
//  5.Объединенная корреляционная матрица ошибок оценивания в ASK
	double marrK_ASK [36];
//  6.матрица перехода из АСК в ПСК на момент mTf
	double marrF_ASK_V_PSK[9];
 // 7.расширенная матрица перехода из АСК в ПСК на момент mTf
	double marrFExt_ASK_V_PSK[36];
//  8.матрица перехода из ПСК в КГСК на момент mTf
	double marrF_PSK_V_KGSK[9];
 // 9. расширенная матрица перехода из  ПСК в КГСК мна момент mTf
	double marrFExt_PSK_V_KGSK[36];
 // 10 матрица перехода из АСК в КГСК
	double marrF_ASK_V_KGSK[9];
 // 11 расширенная матрица перехода из АСК в КГСК
	double marrFExt_ASK_V_KGSK[36];

 // 12.вектор углов Q, Psi,Tet,Bet,Eps
	 double marrMu[5] ;

 // 13. признак того, что фильтр прошел инициализацию
	bool mbInit ;






	// конструктор по умолчанию
	TTraceFlt () ;
	// конструктор копирования
	TTraceFlt  (const TTraceFlt  &R) ;
	// оператор присваивания
	TTraceFlt  &operator=(const TTraceFlt   &R2) ;

	// парам конструктор
   /*	TTraceFlt(const double Bearing, const double TargCourse
	, const double TargZenitAng,  const double V, const double H ,
	const double R,const double valT); */





}  ;
#endif
