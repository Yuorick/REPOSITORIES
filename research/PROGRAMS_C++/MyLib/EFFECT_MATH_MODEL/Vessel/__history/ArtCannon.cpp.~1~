//---------------------------------------------------------------------------


#pragma hdrstop

#include "ArtCannon.h"


TArtCannon::TArtCannon()
{
 menumCannonType = A_192M;
 mRateOfFire = 0.;
 mAngGroupedFire =0.;
 mCannonDelayT = 0.;
}



// конструктор копирования
 TArtCannon ::TArtCannon (const TArtCannon &R)
 {
	menumCannonType = R.menumCannonType;
	mRateOfFire  =  R.mRateOfFire ;
	mAngGroupedFire = R.mAngGroupedFire;
	mCannonDelayT = R.mCannonDelayT;

 }
 // оператор присваивания
 TArtCannon TArtCannon::operator=(TArtCannon  R)
 {
  menumCannonType = R.menumCannonType;
	mRateOfFire  =  R.mRateOfFire ;
	mAngGroupedFire = R.mAngGroupedFire;
	mCannonDelayT = R.mCannonDelayT;

	return *this ;
 }

  // парам конструктор1
 TArtCannon::TArtCannon (const double RateOfFire, const double AngGroupedFire,  const double CannonDelayT)
 {
	mRateOfFire  = RateOfFire  ;
	mAngGroupedFire = AngGroupedFire ;
	mCannonDelayT = CannonDelayT;

 }

 // парам конструктор1
 TArtCannon::TArtCannon (enumCannonType EnumCannonType, const double CannonDelayT)
 {
	menumCannonType = EnumCannonType;
	mCannonDelayT = CannonDelayT;
	switch( EnumCannonType)
	{
		case A_192M:
		mRateOfFire = 2.;

		mAngGroupedFire = 0.001;
		break;
		case A_190_01:
		 mRateOfFire = 60. / 75.;

		 mAngGroupedFire = 0.001;
		break;
		case AK_630:
		mRateOfFire = 60. / 4980.;

		mAngGroupedFire = 0.003;
		break;
		case AK_630_2M:
		mRateOfFire = 60. / 4980./ 2.;

		mAngGroupedFire = 0.003;
		break;

		default:
		break;

	}

 }
#pragma package(smart_init)
