//---------------------------------------------------------------------------

#ifndef PartDataH
#define PartDataH
//---------------------------------------------------------------------------
class TPartData
{
public:
// Тип движения. 0 - равномерное прямолинейное, 1 - горка,
// 2 - кабрирование, 3 - равноускоренное движение
// 4- самонаведение методом пропорциональной навигации
	int miTypePart;
//   длительность участка
	long double mTimePart ;
// скз возмущения движения
	long double mSigW ;
// вектор параметров, опимывающих движение
// для равномерного движения  miTypePart = 0
  //  marrData[i]  =0 i = 0,...,9

// для горки   miTypePart =1
// marrData[0]  - угол плоскости маневра между нормальью к плоскости и вертикалью
// marrData[1],marrData[2]- время, ускоренияе 1-го участка
// marrData[3],marrData[4]- время, ускоренияе 2-го-го участка
// marrData[5],marrData[6]- время, ускоренияе 3-го участка

// вектор параметров, опимывающих движение для маневра "Кабрирование"  miTypePart = 2
// marrData[0]  - угол плоскости маневра между нормальью к плоскости и вертикалью
// marrData[1],marrData[2]- нуль, ускорение
// marrData[3],marrData[4]- нули
// marrData[5],marrData[6]- нули

// вектор параметров, опимывающих равноускоренное движение  miTypePart = 3
// marrData[0], marrData[1],marrData[2]  - ускорение по каждой оси ГСК
// остальные равны нулю

// вектор параметров, опимывающих самоеаведение  по методу проорцион навигации miTypePart = 4
//  marrData[0] - коеффициент навигации
//  marrData[1] - постоянный угол упреждения
//  marrData[2] - максимально возможная допустимая перегрузка, в м/с2

// остальные равны нулю
	long double marrData[10];



	// конструктор по умолчанию
	TPartData () ;
	// конструктор копирования
	TPartData  (const TPartData  &R) ;
	// оператор присваивания
	TPartData  operator=(TPartData   R2) ;

	// парам конструктор
	TPartData  (const int  iTypePart  ,const long double TimePart,const long double SigW, long double *arrData 	) ;





}  ;
#endif
