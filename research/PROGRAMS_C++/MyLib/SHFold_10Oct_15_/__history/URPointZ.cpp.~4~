//---------------------------------------------------------------------------



#pragma hdrstop
#include <vcl.h>
#include <stdio.h>
#include "URPointZ.h"
#include "Comp.h"
#include "Equations.h"

//---------------------------------------------------------------------------


#include <math.h>
#include "UrPointXY.h"
#include "YrRastr.h"


 const double EPS = 0.000001;
TURPointZ::TURPointZ()
 {

 }

 TURPointZ::TURPointZ(const double X1,const double Y1,  TYrRastr *Rastr,const int i)
 {
   X=X1;
   Y = Y1;
   Z = (*Rastr).InterpolateZ( X1,Y1) ;
   M = 0;
 }
 TURPointZ::TURPointZ(const TURPointXY P,  TYrRastr *Rastr)
 {
   X=P.X;
   Y = P.Y;
   Z =(*Rastr).InterpolateZ( P.X,P.Y) ;
   M = 0 ;
 }
  TURPointZ::TURPointZ(const double X1,const double Y1,const double Z1)
  {
   X=X1;
   Y = Y1;
   Z = Z1 ;
   M = 0 ;
 }

 // Конструктор копирования
 TURPointZ::TURPointZ (const TURPointZ &p2)
 {
	 X = p2.X;
	 Y = p2.Y ;
	 Z = p2.Z ;
	 M = p2.M ;

 }
 // оператор присв
TURPointZ TURPointZ::operator=(TURPointZ p2)
{
     X = p2.X;
	 Y=  p2.Y ;
	 Z = p2.Z ;
	 M = p2.M ;

	 return *this ;
}
double TURPointZ::Dist(const TURPointZ p1,const TURPointZ p2)
{
	return sqrt((p1.X - p2.X) * (p1.X - p2.X) + (p1.Y - p2.Y) * (p1.Y - p2.Y)+ (p1.Z - p2.Z) * (p1.Z - p2.Z) );
}
double TURPointZ::ScalMult(const TURPointZ p1,const TURPointZ p2)
{
	return  (p1.X  * p2.X + p1.Y * p2.Y +p1.Z * p2.Z );
}
double TURPointZ::Norm(const TURPointZ p1)
{
	return  (double)sqrt(p1.X  * p1.X + p1.Y * p1.Y +p1.Z * p1.Z );
}
TURPointZ TURPointZ::Plus(const TURPointZ p1,const TURPointZ p2)
{
	TURPointZ p3;

	p3.X = p1.X + p2.X;
	p3.Y = p1.Y + p2.Y;
	p3.Z = p1.Z + p2.Z;
	return p3;

}
TURPointZ TURPointZ::Minus(const TURPointZ p1,const TURPointZ p2) // p1-p2
// p1-p2
{
	TURPointZ p3;

	p3.X = p1.X- p2.X;
	p3.Y = p1.Y - p2.Y;
	p3.Z = p1.Z - p2.Z;
	return p3;

}
TURPointZ TURPointZ::MultReal(const TURPointZ p1,const double alf)
{
	TURPointZ p3;

	p3.X = p1.X * alf;
	p3.Y = p1.Y * alf;
	p3.Z = p1.Z * alf;
	return p3;

}
TURPointZ TURPointZ::ParamPoint(const TURPointZ p1,const TURPointZ p2,const double alf)  // p1 + alf*(p2-p1)
// p1 + alf*(p2-p1)
{
	TURPointZ p3 = Minus(p2,p1);
	TURPointZ p4 = MultReal(p3, alf);

	return Plus( p1,p4);

}

void TURPointZ::showMe()
{
	String sOut = L" TURPointZ" ;
	ShowMessage(sOut +L"\n X= " + X +L" ; Y = " + Y +L" ; Z = " +Z) ;
}
double TURPointZ::CosA(const TURPointZ p1,const TURPointZ p2)
{
	double a = Norm( p1);
	double b= Norm( p2);
	if( !((a > EPS) && (b> EPS)) )
	{
	   ShowMessage (L"Error. TURPointZ::Norm( p1)=0 || Norm( p2)=0  ");
	}
	double c = (p1.X  * p2.X + p1.Y * p2.Y +p1.Z * p2.Z )/Norm( p1)/Norm( p2);
	if (fabs( c ) > 1) c = c / fabs( c ) ;


	return  c;
}
 TURPointZ TURPointZ::VectorProduct(const TURPointZ p1,const TURPointZ p2)
{
	TURPointZ p3;
	p3.X = p1.Y * p2.Z - p1.Z * p2.Y;
	p3.Y =  - p1.X *p2.Z + p1.Z * p2.X ;
	p3.Z = p1.X * p2.Y - p1.Y * p2.X;
	return  p3 ;
}
void TURPointZ::DoNorm(TURPointZ &P)
  {
	double norma = Norm(P);
	P.X = P.X / norma;
	P.Y = P.Y / norma;
	P.Z = P.Z / norma;
	return  ;
  }

// решение задачи переисечения луча и сферы заданного радиуса с центорм в начале координат
// прямая задана точкой  PNtPos и вектором скрости  PNtVelo: PNtPos + t * PNtVelo
// INPUT:
// PNtPos
// PNtVelo
// VAlSphereRad
// OUTPUT:
// pT[2] - времена точек пересечения,  pT[0] <= pT[1]
// pPnt[2] - соответствующие точки пересечения
// возвращает к-во точек пересечения
//
int TURPointZ::findIntertsectLine_And_Sphere(const TURPointZ PNtPos,const TURPointZ PNtVelo, const double VAlSphereRad
  , double *pT, TURPointZ *pPnt)
{
   double a =  Norm(PNtVelo) * Norm(PNtVelo);
   double b = 2. * ScalMult(PNtPos,PNtVelo);
   double c = Norm(PNtPos) * Norm(PNtPos) - VAlSphereRad * VAlSphereRad;
   TComp x1, x2 ;
   // Решение квадраьного улавнения a*x*x + b*x + c =0
// возвращает
// 0 - 2 действительных некраьных корня
// 1 - 2 действительных кратных корня
// 2- имеется по крайней мере один нулевой корень a!= 0, c=0
// 3 - 2 комплексно сопряженных корня
// 4 -  1 действительный корень (a =0)
// 5  - несовместность a=b=0, c!=0
// 6 - тождество )a=b=c=0
int ireturn = 0;
double temp = 0.;
switch( SolvEq2( a, b,c,x1,x2))
{
 case 0:
 pT[0] = x1.m_Re;
 pT[1] = x2.m_Re;

 ireturn = 2;
 break;

 case 1:
 pT[0] = x1.m_Re;
 pT[1] = x1.m_Re;
 ireturn = 1;
 break;

 case 2:
 pT[0] = x1.m_Re;
 pT[1] = x2.m_Re;
 ireturn = 2;
 if (fabs(b) <= 0.00000000001)
 {
  ireturn = 1;
 }
 break;

 default:
 return 0;

} // конец  switch

////


if (pT[0] > pT[1])
 {
  temp = pT[0];
  pT[0] = pT[1];
  pT[1] = temp;
 }

 for (int i = 0; i < 2; i++)
 {
   TURPointZ pntZt = MultReal(PNtVelo,pT[i]) ;
   pPnt[i] =  Plus(pntZt,PNtPos);
 }
return ireturn;
}

  	//http://www.esri.com/library/whitepapers/pdfs/shapefile.pdf
	// http://www.dbase.com/Knowledgebase/INT/db7_file_fmt.htm
	//http://www.clicketyclick.dk/databases/xbase/format/dbf.html#DBF_STRUCT

// изменение порядка следования байтов в 4 байтном слове (32 бита массив)
//  input : chstr - указатель на массив char[4]
// output: chstr - указатель на массив  char[4] c измененным порядком следования
// байтов  chstr[0] = chstr[3] ; chstr1] = chstr[2] ;  chstr[2] = chstr[1] ; chstr[3] = chstr[0] ;
void TURPointZ::ChangeByteOrder(int * pi0)
{
  char c;
  char * chstr = (char*)pi0;
  c = chstr[0];
  chstr[0] = chstr[3] ;
  chstr[3]  = c;
  c = chstr[1];
 chstr[1] = chstr[2] ;
  chstr[2]  = c;

}


void TURPointZ::WriteSetSHPFiles(wchar_t *wchFileName,TURPointZ *purPnt, const int quantPoint)
{

    int lenFileName = wcslen( wchFileName);

	if (!((wchFileName[lenFileName -1] == L'p')
	   && (wchFileName[lenFileName -2] == L'h')
	   && (wchFileName[lenFileName -3] == L's')))
	   {
		 ShowMessage(L" Error file name") ;
		 return;
	   }
	 wchar_t wchDBFFileName [200] ,wchSHXFileName [200] ;
	wcscpy(wchSHXFileName, wchFileName);
	wchSHXFileName[lenFileName -1] =  L'x' ;
	wcscpy(wchDBFFileName, wchFileName);
	wchDBFFileName [lenFileName -1] = L'f';
	wchDBFFileName [lenFileName -2] = L'b';
	wchDBFFileName [lenFileName -3] = L'd';
	WriteDBASEFile(wchDBFFileName,purPnt,  quantPoint) ;
	WriteMainFile(wchFileName,purPnt,  quantPoint) ;
	WriteIndexFile(wchSHXFileName,purPnt,  quantPoint) ;
}



void TURPointZ::WriteDBASEFile(wchar_t *wchFileName,TURPointZ *purPnt, const int quantPoint)
{
	 FILE  *fw ;
	 fw=_wfopen(wchFileName,L"wb");
	 if(!fw) ShowMessage (L"TYrWrite::PutPointsToCsvFile\nFile is not opened !") ;
	  //1. version number and Date of last update  - первые 0-3  байта
	  // char ch = '\x03';
	 int i0 = 201421059;
		  fwrite(&i0,sizeof(int),1 ,fw) ;
		// 2. Number of records  in data file   4-7 байты
		int numRecords = quantPoint ;
		   fwrite(&numRecords,sizeof(int),1 ,fw) ;
		// 3. bytes 8 -31
		int iarr[] = {458817,0,0,0,0,22272};
		 fwrite(iarr,sizeof(int),6 ,fw) ;
		// 4. описание полей bytes 32-63
		int iarr1[] = {25673
					   ,0
					   ,1308622848
					   ,0
					   ,6
					   ,0
					   ,0
					   ,0
					   };
						fwrite(iarr1,sizeof(int),8 ,fw) ;
	  // 5.  Terminator (0Dh) byte 64
	  char ch = '\x0D';
		 fwrite(&ch,1,1 ,fw) ;
	   //
		 char arrch[7] = {
		 '\x20','\x20','\x20','\x20','\x20','\x20','\x30'
		 };
	   for (int i =0 ; i < quantPoint; i++)  fwrite(arrch,1,7 ,fw) ;


	 fclose(fw);
}




void TURPointZ::WriteMainFile(wchar_t *wchFileName,TURPointZ *purPnt, const int quantPoint)
{
  const int SHAPE_TYPE = 11;
  FILE  *fw ;

	 fw=_wfopen(wchFileName,L"wb");
	 if(!fw) ShowMessage (L"TYrWrite::PutPointsToCsvFile\nFile is not opened !") ;

	 // Main File HEADER
	 //*************************************************************************************
	 //1. step.  byte 0 - 23
	 // its are 6 integer values, getting by copying real shp file
	 int iarr[6] = {170328064
					,0
					,0
					,0
					,0
					,0
					 };
		fwrite(iarr,sizeof(int),6 ,fw) ;
	   ///

	   // 2. The value for file length is the total length of the file in 16-bit words (including the fifty
		//16-bit words that make up the header).   Byte4s 24-27
		int iFileLeng = (100 + 44 * quantPoint) /2;


		ChangeByteOrder(& iFileLeng);
		  fwrite(&iFileLeng,sizeof(int),1 ,fw) ;
		///

		// 3. version = 1000 shapetype =5  bytes 28-35
		   iarr[0] =  1000;
		   iarr[1] =  SHAPE_TYPE ;
			 fwrite(iarr,sizeof(int),2 ,fw) ;
		   ///

		// 4. Bounding box
		double Box[8] = {0};
		Box[0] = purPnt[0].X ; Box[1] = purPnt[0].Y ;
		Box[2] = purPnt[0].X ; Box[3] = purPnt[0].Y ;
		Box[4] = purPnt[0].Z ; Box[5] = purPnt[0].Z ;
		Box[6] = purPnt[0].M ; Box[7] = purPnt[0].M ;
		for (int i =0 ; i < quantPoint; i++)
		{

		   if (purPnt[i].X <  Box[0]) Box[0] =  purPnt[i].X;
		   if (purPnt[i].Y <  Box[1]) Box[1] =  purPnt[i].Y;
		   if (purPnt[i].X >  Box[2]) Box[2] =  purPnt[i].X;
		   if (purPnt[i].Y >  Box[3]) Box[3] =  purPnt[i].Y;
		   if (purPnt[i].Z <  Box[4]) Box[4] =  purPnt[i].Z;
		   if (purPnt[i].Z <  Box[5]) Box[5] =  purPnt[i].Z;
		   if (purPnt[i].M >  Box[6]) Box[6] =  purPnt[i].M;
		   if (purPnt[i].M >  Box[7]) Box[7] =  purPnt[i].M;
		}
		  fwrite(Box,sizeof(double),8 ,fw) ;
		///******************************************************************************************
		///******************************************************************************************

	   // RECORDS
	   for (int i = 0; i < quantPoint; i++)
	   {
		  // 1. Record Headers
		   // Byte 0 Record Number Record Number Integer Big
		   int iRecNum = i;
		   ChangeByteOrder(& iRecNum);
		   //Byte 4 Content Length Content Length Integer Big
		   int iContLeng = 36/2 ;
		   ChangeByteOrder(& iContLeng);
		   iarr[0] =  iRecNum;
		   iarr[1] =  iContLeng ;
			 fwrite(iarr,sizeof(int),2 ,fw) ;
		   //*****************************************************
		   //********** Content *******************************************
				int ishapetype =   SHAPE_TYPE ;
			  fwrite(&ishapetype ,sizeof(int),1 ,fw) ;
			  fwrite(&(purPnt[i].X),sizeof(double),1 ,fw) ;
			  fwrite(&(purPnt[i].Y),sizeof(double),1 ,fw) ;
			  fwrite(&(purPnt[i].Z),sizeof(double),1 ,fw) ;
			  fwrite(&(purPnt[i].M),sizeof(double),1 ,fw) ;

	   }

  fclose(fw);
}
void TURPointZ::WriteIndexFile(wchar_t *wchFileName,TURPointZ *purPnt, const int quantPoint)
{
  FILE  *fw ;
	const int SHAPE_TYPE = 11;
	 fw=_wfopen(wchFileName,L"wb");
	 if(!fw) ShowMessage (L"TYrWrite::PutPointsToCsvFile\nFile is not opened !") ;
	  // Ibdex(SHX) File HEADER
	 //*************************************************************************************
	 //1. step.  byte 0 - 23
	 // its are 6 integer values, getting by copying real shp file
	 int iarr[6] = {
					170328064
					,0
					,0
					,0
					,0
					,0
					 };

	   fwrite(iarr,sizeof(int),6 ,fw) ;
	   ///

	   // 2. The value for file length is the total length of the file in 16-bit words (including the fifty
		//16-bit words that make up the header).   Byte4s 24-27
		int iFileLeng = ( 100 + quantPoint *8 )/2 ;;
		ChangeByteOrder(& iFileLeng);
		fwrite(&iFileLeng,sizeof(int),1 ,fw) ;
		///

		// 3. version = 1000 shapetype =5  bytes 28-35
		   iarr[0] =  1000;
		   iarr[1] =  SHAPE_TYPE ;
		   fwrite(iarr,sizeof(int),2 ,fw) ;
		   ///

		// 4. Bounding box

		double Box[8] = {0};
		Box[0] = purPnt[0].X ; Box[1] = purPnt[0].Y ;
		Box[2] = purPnt[0].X ; Box[3] = purPnt[0].Y ;
		Box[4] = purPnt[0].Z ; Box[5] = purPnt[0].Z ;
		Box[6] = purPnt[0].M ; Box[7] = purPnt[0].M ;
		for (int i =0 ; i < quantPoint; i++)
		{

		   if (purPnt[i].X <  Box[0]) Box[0] =  purPnt[i].X;
		   if (purPnt[i].Y <  Box[1]) Box[1] =  purPnt[i].Y;
		   if (purPnt[i].X >  Box[2]) Box[2] =  purPnt[i].X;
		   if (purPnt[i].Y >  Box[3]) Box[3] =  purPnt[i].Y;
		   if (purPnt[i].Z <  Box[4]) Box[4] =  purPnt[i].Z;
		   if (purPnt[i].Z <  Box[5]) Box[5] =  purPnt[i].Z;
		   if (purPnt[i].M >  Box[6]) Box[6] =  purPnt[i].M;
		   if (purPnt[i].M >  Box[7]) Box[7] =  purPnt[i].M;
		}
		  fwrite(Box,sizeof(double),8 ,fw) ;
		///******************************************************************************************
		///******************************************************************************************
	   // RECORDS
	   int offset = 100;
	   for (int i = 0; i < quantPoint; i++)
	   {
		  int ioffset = ( offset + i * 44 )/2;
		  ChangeByteOrder(& ioffset);
		   int iContLeng = 36/2 ;
		   ChangeByteOrder(& iContLeng);
			 fwrite(&ioffset,sizeof(int),1 ,fw) ;
			 fwrite(&iContLeng,sizeof(int),1 ,fw) ;

	   }

	   fclose(fw);

}


void TURPointZ::ReadSHPFile(wchar_t *wchFileName,TURPointZ **ppurPnt,  int *pquantPoint)
{
	 int lenFileName = wcslen( wchFileName);

	if (!((wchFileName[lenFileName -1] == L'p')
	   && (wchFileName[lenFileName -2] == L'h')
	   && (wchFileName[lenFileName -3] == L's')))
	   {
		 ShowMessage(L" Error file name") ;
		 return;
	   }
	wchar_t  wchSHXFileName[200] ;
	wcscpy(wchSHXFileName, wchFileName);
	wchSHXFileName[lenFileName -1] =  L'x' ;
	FILE  *fr0 ;

	 fr0=_wfopen(wchSHXFileName,L"rb");
	 if(!fr0) ShowMessage (L"TURPointZ::ReadSHPFile\nFile is not opened !") ;
	  int offset0 = 32;
	  int ishapetype = -1;

	  fseek(fr0,offset0,SEEK_SET);
	  fread(&ishapetype ,sizeof(int), 1,fr0) ;
	  if (ishapetype != 11)
	  {
		ShowMessage(L" There is not polygon in shape file") ;
		 return;
	  }
	   offset0 = 24;
	  fseek(fr0,offset0,SEEK_SET);
	  int lenSHXFile = -1;
	   fread(&lenSHXFile ,sizeof(int), 1,fr0) ;
	  ChangeByteOrder( &lenSHXFile);
	  int quantPoint =( 2 *  lenSHXFile - 100 )/ 8 ;
	   *ppurPnt = (TURPointZ *)realloc( *ppurPnt, quantPoint * sizeof( TURPointZ)) ;
	   *pquantPoint =  quantPoint ;

		FILE  *fr1 ;

	 fr1=_wfopen(wchFileName,L"rb");
	 if(!fr1) ShowMessage (L"TURPointZ::ReadSHPFile\nFile is not opened !") ;
	 int offset1 = -1;

	 double x,y,z,m;
	 for (int i = 0; i < quantPoint; i++)
	 {
	   offset0 = 100 + 8 * i ;
	   fseek(fr0,offset0,SEEK_SET);
	   fread(&offset1 ,sizeof(int), 1,fr0) ;
	   ChangeByteOrder( &offset1);
	   offset1 = 2 * offset1 + 12;
	   fseek(fr1,offset1,SEEK_SET);
		 fread(& x ,sizeof(double), 1,fr1) ;
		 fread(& y ,sizeof(double), 1,fr1) ;
		 fread(& z ,sizeof(double), 1,fr1) ;
		 fread(& m ,sizeof(double), 1,fr1) ;
	  (*ppurPnt)[i ].X =   x;
	  (*ppurPnt)[i ].Y =   y;
	  (*ppurPnt)[i ].Z =   z;
	  (*ppurPnt)[i ].M =   m;

	 }

	 fclose(fr0);
	 fclose(fr1);

}


void   TURPolygon::LinearTransformation(const double  valAng , const TURPointXY pntSdvig,const double valRastigenie )
{
	double arrMtxPer[4] = {0.};
  arrMtxPer[0] = cos(valAng);
  arrMtxPer[1] = -sin(valAng);
  arrMtxPer[2] = -arrMtxPer[1];
	arrMtxPer[ 3] = arrMtxPer[0];
	TURPointXY PntTemp1 (X * valRastigenie,Y * valRastigenie  );
  TURPointXY PntTemp2 = PntTemp1.fncLinTrasform( arrMtxPer );
	X =  PntTemp2.X + pntSdvig.X;
	Y =  PntTemp2.Y + pntSdvig.Y;

}
#pragma package(smart_init)
