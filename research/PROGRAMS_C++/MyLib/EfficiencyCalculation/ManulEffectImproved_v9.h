//---------------------------------------------------------------------------

#ifndef ManulEffectImproved_v9H
#define ManulEffectImproved_v9H
//---------------------------------------------------------------------------

#include "TargBearing0.h"
#include "EtalonSign.h"
#include "Far_2D.h"
#include "Traject.h"
#include "Target.h"
//Файл данных для расчета эффективности
//File MODEL_RASSCHET_EFF.h

 //******************************************************************************
 // Изменение № 10
 //******************************************************************************
 #define k 9 //Число интегрируемых уравнений +1
//******************************************************************************
// Конец изменения № 10
//******************************************************************************
   #include <math.h>


 class TFar_2D ;
 class TEtalonSign;
 class TTargBearing0;
//enum enumTargetType ;//{NOMOVING, ABOVEWATER, PLANE};//Типы целей


 //int //Kr,//Количество реализаций
  //	 Kcn;//Количество снарядов

//===============================================================================
//Константы для получения случайных чисел


//Функция расчета координат и скоростей своего корабля
 void raschet_coord_swoego_corablja (double ti, const double VAlSigSins);
  void fnc_Deriv_f(const double VAlCalibro, double *y,double *yp);
 //  void raschet_gauss_raspredelenie ();
 void fncPreviousArrangments(TTarget Targ0
   , const double VAlCalibro, const double VAlDn,const double VAlDk
	, const int n, const double dti,
	double &t00, double &tp00,  double &tk, double &tpkk);

 	void ResetFun();

 //Функция расчета координат и скоростей цели
 void raschet_coord_zeli (enumTargetType TargType,  const double WTargSkz, TTargBearing0  TargBear0, const double ti,  const double dti
	,double &targX, double &targY, double &targH
	,double &targVX, double &targVY, double &targVH);
 // расчет начальных координат цели
void raschet_nach_coord_zeli (enumTargetType TargType,TTargBearing0  TargBear0
	,double &targX0, double &targY0, double &targH0);

void 	raschet_nach_velo_zeli (TTargBearing0 TargBear0, double &valTargGSK_VX0
	,  double &valTargGSK_VY0,  double &valTargGSK_VH0);
void raschet_coord_zeli_GSK_ideal (enumTargetType TargType,  TTargBearing0  TargBear0, const double VAlT
	,double &valTargGSK_X, double &valTargGSK_Y, double &valTargGSK_H
	,double &valTargGSK_VX, double &valTargGSK_VY, double &valTargGSK_VH);

double fncLinExtrapolation(const double VAlF0, const double VAlF1
  ,const double VAlX,const double VAlDelX);
 //===============================================================================
 //===============================================================================
 int calcEffect(wchar_t *wchOutFold, TFar_2D Far_2D,  const double HAntenna, TTarget Targ , TInitTargData InitTargData
	 ,const double PowerPrd, const double KYPrd, TEtalonSign EtalonSign, const double VAlDT_filtr
		 , const int QuantIspit, const int QuantShells,const double VAlCalibro
	, const double VAlDn0,  const double VAlDk, const double VAlSigSins, const bool VAlBSkaliga
		, double *pvalProb, double *pvalProb_Gladk, double *pvalDistBeginSopr, int *pQuantShots);

 double MAX__(double a , double b)
 {
 return (a > b)? a:b;
 }

 double MIN__(double a , double b)
 {
 return (a < b)? a:b;
 }

 int MIN__(int a , int b)
 {
 return (a < b)? a:b;
 }
 //Функция расчета числа, равномерно распределенного на [0,2pi]
// void raschet_randu_raspredelenie ();
 //Функция расчета наблюдаемых координат цели
 void raschet_coord_zeli_nabl(double *arrVSTargKGSK_True, double *arrVSTargKGSK_Zv );

typedef struct INTEGRIR_Input
{
	double tp0,tp;//Начало и конец интегрирования
	double h0,b;//Шаг интегрирования со знаком b
//******************************************************************************
 // Изменение № 11
 //******************************************************************************
  	double y[9];//Начальные условия на систему интегрируемых уравнений
 //******************************************************************************
 // Конец изменения № 11
 //******************************************************************************
}INTEGRIR_Input;//Структура входных данных в блок интегрирования



 //******************************************************************************

  double aks130[26]//Коэффициенты аппроксимации для вычисления деривации(калибр 130) //16.12.2010
      = {0,0.000683756,-0.007145348,0.025268276,-0.035210629,0.015896095,
	 -0.000275815,0.00267358,-0.00672102,0.007794645,-0.0026943,
	 0.0000429952,-0.00029842,0.0007616749,-0.000802556,0.000266836,
	 -0.000002142,0.0000143294,-0.0000342697,0.000035015,-0.000011729,
	 0.0000000372,-0.0000002508,0.000000612,-0.000000652,0.000000247};

  //Закон сопротивления
  double alf0[9]={0.,0.157,-3.871879,122.720358,-19.848947,-0.639686,
		  0.643812,0.621061,0.26};
  double alf1[9]={0.,0.,15.734575,-390.742644,52.409513,2.250136,
		  -0.278701,-0.242875,0.};
  double alf2[9]={0.,0.,-20.511918,413.61313,-45.299813,-1.600055,
		  0.069619,0.053243,0.};
  double alf3[9]={0.,0.,8.928144,-145.266282,13.06484,0.363206,
		  -0.006051,-0.003765,0.};
  double my3[8]={0.,0.73357,0.90962,0.99765,1.17371,1.58451,
		 2.64084,3.72652};

  //******************************************************************************
 // Изменение № 14
 //******************************************************************************
 // Безразмерная табулированная функция для расчета  деривационной
 //  функции снарядов, стабилизированных вращением, аппроксимирована
 //  степенным полиномом 2-ой степени:Knm(M)=Kn0+Kn1*M+Kn2*M*M, где
 //   Kn0,Kn1,Kn2 равны соответственно элементам массивов kn0[8],kn1[8],
 //   kn2[8], в зависимости от того, какое значение принимает M.
 //   Если M<=ky3[1], то Kn0=kn0[1],Kn1=kn1[1],Kn2=kn2[1].
 //   Если ky3[i]<M<=ky3[i+1], где 1<=i<=5,то Kn0=kn0[i+1],Kn1=kn1[i+1],
 //					    Kn2=kn2[i+1].
 //   Если M>ky3[6], то Kn0=kn0[7],Kn1=kn1[7],Kn2=kn2[7].
  double kn0[8]={0.,0.206,0.173903,0.371089,0.085860,0.033077,
		    0.139043,0.370},
  kn1[8]={0.,0.,0.106376,-0.307251,0.084315,0.139076,0.084848,0.},
  kn2[8]={0.,0.,-0.086023,0.126190,0.000399,-0.013524,-0.007699,0.},
  ky3[7]={0.,0.6,0.8,1.1,1.5,2.9,4.9};

       // Табличное представление коэффициента аэродинамического
	// аксиального демпфирующего момента (момента трения)
  double mash[31]={0,0.4,0.5,0.6,0.7,0.8,0.9,0.95,1.0,1.05,1.1,1.15,1.2,1.3,1.4,
                   1.5,1.6,1.7,1.8,1.9,2.0,2.1,2.2,2.3,2.4,2.5,2.6,2.7,2.8,2.9,3.0},
	 mmash[31]={0,0.0007,0.0007,0.0006,0.0006,0.0006,0.0006,0.0006,0.0006,0.0006,
                0.0006,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,0.0005,
                0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,0.0004,
                0.0004,0.0003,0.0003};
 //******************************************************************************
 // Конец изменения № 14
 //******************************************************************************

 double cbxm100[31]//Массив коэффициентов согласования по координате Х
	 //в зависимости от угла наведения орудия в вертикальной плоскости
	={0.919,0.918/*3*/,0.919/*6*/,0.92/*9*/,0.9201/*12*/,
	  0.9205/*15*/,0.9205/*18*/,0.9207/*21*/,0.921/*24*/,
	  0.921/*27*/,0.921/*30*/,0.9215/*33*/,0.9215/*36*/,
	  0.9215/*39*/,0.922/*42*/,0.9227/*45*/,0.923/*48*/,
	  0.9233/*51*/,0.9236/*54*/,0.9237/*57*/,0.924/*60*/,
	  0.9245/*63*/,0.9245/*66*/,0.925/*69*/,0.9255/*72*/,
	  0.926/*75*/,0.926/*78*/,0.926/*81*/,0.9265/*84*/,
	  0.9265/*87*/,0.9265/*90*/};
 double cbym100[31]//Массив коэффициентов согласования по координате Y
	 //в зависимости от угла наведения орудия в вертикальной плоскости
	={1.0,1.00/*3*/,0.958/*6*/,0.947/*9*/,0.9445/*12*/,
	  0.9445/*15*/,0.9445/*18*/,0.9445/*21*/,0.9445/*24*/,
	  0.9445/*27*/,0.945/*30*/,0.945/*33*/,0.945/*36*/,
	  0.945/*39*/,0.945/*42*/,0.945/*45*/,0.9456/*48*/,
	  0.946/*51*/,0.946/*54*/,0.9463/*57*/,0.9464/*60*/,
	  0.9469/*63*/,0.9469/*66*/,0.9471/*69*/,0.9475/*72*/,
	  0.948/*75*/,0.9485/*78*/,0.949/*81*/,0.949/*84*/,
	  0.949/*87*/,0.949/*90*/};

 //Массив углов наведения орудия в вертикальной плоскости (градус)
 double fim100[31]={0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
		 48,51,54,57,60,63,66,69,72,75,78,81,84,87,90};

 //******************************************************************************
 // Изменение № 15
 //******************************************************************************
  double cbzm100[31]={0.95,0.95/*3*/,0.88/*6*/,0.88/*9*/,0.85/*12*/,
	  0.8/*15*/,0.75/*18*/,0.73/*21*/,0.73/*24*/,
	  0.7/*27*/,0.7/*30*/,0.7/*33*/,0.65/*36*/,
	  0.65/*39*/,0.65/*42*/,0.65/*45*/,0.65/*48*/,
	  0.65/*51*/,0.65/*54*/,0.6/*57*/,0.55/*60*/,
	  0.55/*63*/,0.55/*66*/,0.5/*69*/,0.45/*72*/,
	  0.4/*75*/,0.33/*78*/,0.25/*81*/,0.25/*84*/,
	  0.25/*87*/,0.25/*90*/};
 //******************************************************************************
 // Конец изменения № 15
 //******************************************************************************

 double cbxm130[31]//Массив коэффициентов согласования по координате Х
	 //в зависимости от угла наведения орудия в вертикальной плоскости
    ={0.98,0.98/*3*/,0.9765/*6*/,0.9785/*9*/,0.98/*12*/,
	  0.9815/*15*/,0.9835/*18*/,0.9845/*21*/,0.986/*24*/,
	  0.9875/*27*/,0.9885/*30*/,0.9895/*33*/,0.9905/*36*/,
	  0.9925/*39*/,0.994/*42*/,0.996/*45*/,1.03/*48*/,
	  1.03/*51*/,1.03/*54*/,1.05/*57*/,1.05/*60*/,
	  1.05/*63*/,1.05/*66*/,1.08/*69*/,1.08/*72*/,
	  1.1/*75*/,1.2/*78*/,1.2/*81*/,1.4/*84*/,
	  2.5/*87*/,2.5/*90*/};
 double cbym130[31]//Массив коэффициентов согласования по координате Y
	 //в зависимости от угла наведения орудия в вертикальной плоскости
    ={0.88,0.88/*3*/,0.93/*6*/,0.95/*9*/,0.9575/*12*/,
	  0.965/*15*/,0.967/*18*/,0.9675/*21*/,0.9705/*24*/,
	  0.972/*27*/,0.974/*30*/,0.975/*33*/,0.9753/*36*/,
	  0.9755/*39*/,0.9757/*42*/,0.9759/*45*/,0.964/*48*/,
	  0.964/*51*/,0.964/*54*/,0.966/*57*/,0.968/*60*/,
	  0.968/*63*/,0.964/*66*/,0.964/*69*/,0.964/*72*/,
	  0.962/*75*/,0.962/*78*/,0.962/*81*/,0.962/*84*/,
	  0.962/*87*/,0.962/*90*/};

 //******************************************************************************
 // Изменение № 15
 //******************************************************************************
   double cbzm130[31]={0.35,0.35/*3*/,0.45/*6*/,0.55/*9*/,0.6/*12*/,
	  0.7/*15*/,0.75/*18*/,0.9/*21*/,0.9/*24*/,
	  1.0/*27*/,1.15/*30*/,1.3/*33*/,1.35/*36*/,
	  1.5/*39*/,1.6/*42*/,1.7/*45*/,1.75/*48*/,
	  1.9/*51*/,2.0/*54*/,2.2/*57*/,2.35/*60*/,
	  2.5/*63*/,2.65/*66*/,2.8/*69*/,2.95/*72*/,
	  3.15/*75*/,3.22/*78*/,3.5/*81*/,3.5/*84*/,
	  3.5/*87*/,3.5/*90*/};
 //******************************************************************************
 // Конец изменения № 15
 //******************************************************************************

 //Массив углов наведения орудия в вертикальной плоскости (градус)
 double fim130[31]={0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,
		 48,51,54,57,60,63,66,69,72,75,78,81,84,87,90};

 double cbxm76[16]//Массив коэффициентов согласования по координате Х
	 //в зависимости от угла наведения орудия в вертикальной плоскости
	={1.088,1.088/*6*/,1.0925/*12*/,1.0975/*18*/,1.1/*24*/,
	  1.1035/*30*/,1.105/*36*/,1.1046/*42*/,1.10/*48*/,
	  1.096/*54*/,1.0915/*60*/,1.085/*66*/,1.078/*72*/,
	  1.075/*78*/,1.073/*84*/,1.073/*90*/};
 double cbym76[16]//Массив коэффициентов согласования по координате Y
	 //в зависимости от угла наведения орудия в вертикальной плоскости
	={1.090,1.090/*6*/,1.0947/*12*/,1.1/*18*/,1.1026/*24*/,
	  1.107/*30*/,1.106/*36*/,1.106/*42*/,1.10175/*48*/,
	  1.0965/*54*/,1.092/*60*/,1.0867/*66*/,1.08/*72*/,
	  1.075/*78*/,1.0715/*84*/,1.0715/*90*/};
 //Массив углов наведения орудия в вертикальной плоскости (градус)
 double fim76[16]={0,6,12,18,24,30,36,42,48,54,60,66,72,78,84,90};


 typedef struct RZW_Input
 {
	 double Xzel,Yzel,Hzel;//Координаты цели
	 double Vxzel,Vyzel,Vhzel;//Составляющие скорости цели
	 double fi,q;//Начальные углы наведения снаряда
 }RZW_Input;//Структура входных данных в RZW

 typedef struct RZW_Output
 {
	 double fi,q;//Углы наведения снаряда
	 double tp;//Полетное время
//******************************************************************************
 // Изменение № 16
 //******************************************************************************
	 double y[9];//Координаты (y[1],y[2],y[3]), x,h,y
				 //составляющие скорости (y[4],y[5],y[6]),
	             //плотность (y[7]) воздуха
 //******************************************************************************
 // Конец изменения № 16
 //******************************************************************************
	 double xy,yy,hy;//Упрежденные координаты цели
	 double dy;   // дальность до цели в точке встречи в КГСК
 }RZW_Output;//Структура выходных данных из RZW и любого блока из RZW



//--------------------------------------------------------------


 double  RZW__(const double VAlCalibro,double *arrVS_Vessel_GSK00,  double *arrVSTarg0, RZW_Output *TRZW_Output,
	double& Fi0, // начальный угол места точки бросания
	double& Qu0, // начальный азимут точки бросания
	double kMuldFi_2, // множитель приращения угла места для 2-го этапа алгоритма
	double kMuldQu_2 // множитель приращения азимута для 2-го этапа алгоритма
	 //,	double Vb0 // нач.скорость снаряда
		);

double AimFun_RZW__(	const double VAlCalibro
										, double *arrVS_Vessel_GSK00
													, double *arrVS_KGSK_Targ0
													,double Fi // угол места
													,double Qu // азимут
													,double *arrVS_Shell_KGSK// вектор состояния снаоряда в точке встречи
													,double *arrVS_Shell_SSK// вектор состояния снаоряда в точке встречи
													, double *arrVS_Targ_KGSK// вектор состояния цели  в точке встречи
													,double* tp_manul // подлётное время
													,double val_dtInt
												);


 void From_xyhKGSK_To_xyhSSK(double cosQu, double sinQu, double x,
	double y, double h, double& x1, double& y1, double& h1);

 void From_xyhSSK_To_xyhKGSK(double cosQu, double sinQu, double x,
	double y, double h, double& x1, double& y1, double& h1);

void InitFi0Qu0(double *arrVSTarg_KGSK0, double& Fi0, double& Qu0, double Vb0);





 void From_xyhKGSK_To_xyhSSK(double cosQu, double sinQu, double *arrKGSKInp, double *arrOut);
 void From_xyhSSK_To_xyhKGSK(double cosQu, double sinQu, double *arrSSKInp, double *arrOut) ;
int SZn,SZnn,SZnn1;



double fncSignum(double x);

void fncMove_130_Cal_Shell_TO_ZeroAlt_AND_ShowGraphs(double *arrStrSK_VS
   ,const double VAlCoefCx, const double VAlCoefCy, const double VAlCoefCz
   ,const double VAlVessV, const double VAlVessQ, const  double StepInt
		, wchar_t *wcharrPath,  double &valDHoriz );

void calcEilerStep(double *arrStrSK_VS/*,const double VAlVessV, const double VAlVessQ*/, const  double valStepInt);



/*
//Тип А1, новая, 300 м/c
 double Kr_Glad_1[5]={0,0.24,0.47,0.73,1};
 double Mas_Dal_1[5]={429.4,576.47,629.4,652.9,703};
*/
 /*
 //Тип B, новая,300м/c
 double Kr_Glad_1[13]={0,0.14,0.33,0.66,0.88,0.91,0.93,0.94,0.95,0.96,0.975,0.99,1};
 double Mas_Dal_1[13]={1980,2500,3000,3500,4000,4500,5000,5500,6000,6500,7000,7500,8000};
 */
/*
 //Тип А1, новая, 700 м/c
 double Kr_Glad_1[5]={0,0.25,0.5,0.743,1};
 double Mas_Dal_1[5]={700.0,900.0,1000.0,1100.0,1200.0};
*/
/*
 //Тип А1, новая, 1000 м/c
 double Kr_Glad_1[5]={0,0.25,0.5,0.743,1};
 double Mas_Dal_1[5]={490.0,630.0,700.0,770.0,840.0};
*/

/*
 //Тип B, новая,  700м/c
 double Kr_Glad_2[6]={0,0.108,0.215,0.554,0.877,1};
 double Mas_Dal_2[6]={4500.0,5000.0,5500.0,6000.0,6500.0,7000.0};
*/
/*
 //Новый условный закон поражения, 100 мм, тип А1+B
 double X_yzp[9]={0.0,0.5,0.75,1.0,1.5,2.0,2.5,3.0,3.5};
 double Y_yzp[9]={1.0,1.0,0.96,0.904,0.704,0.496,0.296,0.144,0.064};
*/
/*
 //Новый условный закон поражения, 100 мм, тип А1
 double X_yzp[6]={0.0,0.5,1.0,1.5,2.0,2.5};
 double Y_yzp[6]={1.0,1.0,0.85,0.45,0.1,0.0};
*/
/*
 //Новый условный закон поражения, 100 мм, тип В
 double X_yzp[8]={0.0,0.5,1.0,1.5,2.0,2.5,3.0,3.5};
 double Y_yzp[8]={1.0,0.6,0.3,0.45,0.43,0.3,0.15,0.06};
*/


 //Новый условный закон поражения, 130 мм
 double X_yzp[7]={0.0,1.0,1.5,2.0,2.5,3.0,3.05};
 double Y_yzp[7]={1.0,1.0,0.65,0.264,0.155,0.013, 0.};


	//Новый условный закон поражения, 130 мм , Vц = 700 m/s
 double X_yzp_Garpun700_TypeB[7]={0.0,0.5,1.0,1.5,2.0,2.5,3.0};
 double Y_yzp_Garpun700_TypeB[7]={1.0,0.41,0.26,0.4,0.45,0.18,0.1};


 //Тип B, старая,300 м/c
 double Kr_Glad_300[12]={0,0.2,0.4,0.6,0.74,0.8,0.86,0.9,0.94,0.96,0.99,1};
 double Mas_Dal_300[12]={0,300,460,600,800,1000,1250,1500,1750,2000,2500,2660};


 //Тип B, старая,700 м/c
 double Kr_Glad_700[16]={0,0.04,0.1,0.14,0.25,0.26,0.44,0.52,0.62,0.68,0.78,0.8,0.844,0.94,0.96,1};
 double Mas_Dal_700[16]={0,300,460,600,800,1000,1250,1500,1750,2000,2500,2660,3000,4000,5000,6000};

/*
 //Тип B, старая,1000 м/c
 double Kr_Glad_1[16]={0,0.04,0.1,0.14,0.25,0.26,0.44,0.52,0.62,0.68,0.78,0.8,0.844,0.94,0.96,1};
 double Mas_Dal_1[16]={0,210,322,420,560,700,875,1050,1225,1400,1750,1862,2100,2800,3500,4200};
*/

double calcHittingProbabylity(TTarget Targ , const double VAlCalibro, double valProm);
//End MODEL_RASSCHET_EFF.h
#endif
