//---------------------------------------------------------------------------

#include <vcl.h>
#include <string.h>
#pragma hdrstop
//---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"

#include "FormCoastTargs.h"

#include "YrString.h"
#include <stdio.h>
#include <stdlib.h>
#include "AM_2D.h"
#include "Far_2D.h"
#include "Comp.h"
#include "Faceta.h"
#include "Far.h"
#include "Diagrams.h"
#include "Gauss.h"

#include "MatrixProccess.h"


#include "Target.h"
#include "YrWrite.h"

#include "Sins.h"
#include "DriverMech.h"

#include "Measurer.h"
#include "YrWriteShapeFile.h"

#include "InitTargData.h"
#include "CalcCorMatrx.h"

#include "Environment.h"
#include "Equations.h"
#include "MyShellTraj.h"

#include "SincDgr.h"
#include "URPointZ.h"
#include "ShellBody.h"
#include "Bius.h"
#include "Line.h"
#include "CoastTargPicturte.h"
#include "NeighbourhoodAppPoint.h"


static int I_ENTER_COUNT = 0;
extern const double VAL_C;
extern TYrRastr rstrUZP_OGS_St_L10_H0;
extern const	double arrSPrived[];
extern const double VAl_YZP_ForOpenManPower_Calibro130 ;
extern const double VAl_YZP_ForOpenManPower_Calibro100 ;

TForm2 *Form2;
//---------------------------------------------------------------------------
__fastcall TForm2::TForm2(TComponent* Owner)
	: TForm(Owner)
{
bCorrection = false;
menumTypeOfControlAlgorithm = STANDART;
RadioGroup2->ItemIndex=1;
RadioGroup1->ItemIndex=0;
miIdexRadioGroup1 =  RadioGroup1->ItemIndex;

mQuantShells = 150;
LabeledEdit1->Text =   mQuantShells;

ComboBox3->ItemIndex = 0;
LabeledEdit2->Text = 1;

ComboBox1->ItemIndex = 0;
LabeledEdit6->Text = 130;
}
//---------------------------------------------------------------------------

	//---------------------------------------------------------------------------
void __fastcall TForm2::FormShow(TObject *Sender)
{

	drawManPowerPoligon();
 // drawRealFar();

}
//---------------------------------------------------------------------------
void __fastcall TForm2::drawManPowerPoligon()
{  /*
				Image1->Canvas->Polygon()
		Image1->Canvas->Brush->Color=clSilver;//clRed;
	  Image1->Canvas->Pen->Width=1;
	  Image1->Canvas->Pen->Color= clBlack;//clWhite;


		miWidth = Image1->Width;
	  miHeight =Image1->Height;

	  mdx=(double)miWidth/mNumCols;
	  mdy=(double)miHeight/mNumRows;

		TRect rec(0,miHeight,miWidth,0);

		Image1->Canvas->FillRect(rec);

	//  TRect rec1(0,mNumRows *miHeight, mNumCols *miWidth, 0);


  for( int i =0; i < mNumRows; i++)
	  for(int j=0; j < mNumCols; j++)
	  {
		  DrawCell_(i, j);
	  }
	  Image1->Canvas->Pen->Width= 5;
	  Image1->Canvas->MoveTo(rec.Left,rec.Top);
	  Image1->Canvas->LineTo(rec.Right,rec.Top);
	  Image1->Canvas->LineTo(rec.Right,rec.Bottom);
	  Image1->Canvas->LineTo(rec.Left,rec.Bottom);
	  Image1->Canvas->LineTo(rec.Left,rec.Top);

	  ///
  	  Image1->Canvas->Pen->Width= 7;
	  Image1->Canvas->MoveTo(rec.Left,rec.Top/2);
	  Image1->Canvas->LineTo(rec.Right,rec.Top/2);
	  Image1->Canvas->MoveTo(rec.Right/2,rec.Top);
	  Image1->Canvas->LineTo(rec.Right/2,rec.Bottom);
		Image1->Canvas->Pen->Width= 1;
		*/
}
//---------------------------------------------------------------------------
void __fastcall TForm2::Button1Click(TObject *Sender)
{
  Close();
}
//---------------------------------------------------------------------------
//---------------------------------------------------------------------------



void __fastcall TForm2::RadioGroup1Exit(TObject *Sender)
{
		if ((RadioGroup1->ItemIndex) != miIdexRadioGroup1)
		{
		 miIdexRadioGroup1 = RadioGroup1->ItemIndex;
		 bCorrection = !bCorrection;
		}
}
//---------------------------------------------------------------------------


void __fastcall TForm2::RadioGroup1Click(TObject *Sender)
{
		 if ((RadioGroup1->ItemIndex) != miIdexRadioGroup1)
		{
		 miIdexRadioGroup1 = RadioGroup1->ItemIndex;
		 bCorrection = !bCorrection;
		}
}
//---------------------------------------------------------------------------

void __fastcall TForm2::Button2Click(TObject *Sender)
{
			wchar_t arwch[2] ={0};
			String s_22  =arwch;
			LabeledEdit4->Text  = -1;//s_22;
			LabeledEdit3->Text  = s_22;
			LabeledEdit5->Text  = s_22;
			LabeledEdit7->Text  = s_22;
		// создание пути к папке с отчетом
		if (!mpwchOutFile0) {
		if (I_ENTER_COUNT > 4)
		Close();

		ShowMessage(L"Укажите путь к папке с графиками");
		I_ENTER_COUNT++;
		return;
		}
		wcscpy(mwchOutFold, mpwchOutFile0);
		wchar_t *pwchr = wcsrchr(mwchOutFold, L'\\');
		pwchr[0] = 0;
	 //	String wchFoldName = mwchOutFold;
		fncInputData() ;
		double arrShellScatteringsCorMtrx_GSK[36] = {0.};

		double valSKZPromach = -1.0,   valProb = -1.0;
		double arrShellVeloAppointmPoint_GSK [3] ={0.};
 // эти массивы формируются в системе координат привязанной к углу ориентации цели
 // это аналог скоростной сиситемы координат движущейся цели.
 // просто вместо курсового угла движения цели принимается угол ориентации оси цели в ГСК
 //  parrAimingPoints_X [mQuantShells]-  массив различных точек прицеливания по оси X  СкСК
//  piarrRepeatQuants_X [mQuantShells] - массив повторений точек прицеливания по оси X
//  iQuantAimingPoints_X- к- во различных точек прицеливания по оси X
//  parrAimingPoints_Y [mQuantShells]-  массив различных точек прицеливания по оси Y
//  piarrRepeatQuants_Y [mQuantShells] - массив повторений точек прицеливания по оси Y
//  iQuantAimingPoints_Y - к- во различных точек прицеливания по сои Y
	/*	double *parrAimingPoints_X = new double [mQuantShells];
		int *piarrRepeatQuants_X = new int [mQuantShells];
		int iQuantAimingPoints_X = -1;

		double *parrAimingPoints_Y = new double [mQuantShells];
		int *piarrRepeatQuants_Y = new int [mQuantShells];
		int iQuantAimingPoints_Y = -1; */
		TURPointXY *ppntArrCorrecting = new TURPointXY[mQuantShells];
		if (! mFight.calcSuccessProbCoast(mQuantShells, bCorrection, mQuantIspit, mKillingRange
		, &valSKZPromach , arrShellScatteringsCorMtrx_GSK  ,arrShellVeloAppointmPoint_GSK, &valProb
		/*, parrAimingPoints_X, piarrRepeatQuants_X, &iQuantAimingPoints_X
		, parrAimingPoints_Y, piarrRepeatQuants_Y, &iQuantAimingPoints_Y*/,menumTypeOfControlAlgorithm, ppntArrCorrecting  )
			)
		{
			LabeledEdit4->Text  = -1;
			LabeledEdit3->Text  = -1;
			LabeledEdit5->Text  = -1;
			LabeledEdit7->Text  = -1;
			return;
		}

			// 1. курсовой угол снаряда:
		 const	double VAlPsi = atan2(arrShellVeloAppointmPoint_GSK[1], arrShellVeloAppointmPoint_GSK[0]);
		 ///

		 // 2. Формирование матрицы эллипса рассеяния точки падения в плоскости OXY ГСК
		 double arrElK[4] = {0.};
		 arrElK[0] = arrShellScatteringsCorMtrx_GSK[0] ;
		 arrElK[1] =arrShellScatteringsCorMtrx_GSK[1] ;
		 arrElK[2] = arrElK[1] ;
		 arrElK[3] = arrShellScatteringsCorMtrx_GSK[7] ;
		 ///

		 // 3. пересчет коррел матрицы в систему координат ориентированную на цель (ГСК повернутая на угол пеленга цели PI/2 - mBearing0)
		 double arrBearingK[4] = {0.}, arrRotate[4] ={0.}, arrTemp[4] ={0.};
		 arrRotate[0] = cos(M_PI/2. - mBearing0);
		 arrRotate[1] = -sin(M_PI/2. - mBearing0);
		 arrRotate[2] = -arrRotate[1];
		 arrRotate[3] = arrRotate[0];

		 MtrxMultMatrx(arrRotate,2, 2, arrElK,2, arrTemp) ;
		 MtrxMultMatrxTransp(arrTemp,2, 2, arrRotate,2, arrBearingK) ;
		 ///

		int	ia = (valProb * 100);
		LabeledEdit4->Text  =(( double)ia)/ 100.;

		ia = (sqrt(arrBearingK[0]) * 100);
		LabeledEdit3->Text  =(( double)ia)/ 100.;

		ia = (sqrt(arrBearingK[3]) * 100);
		LabeledEdit5->Text  =(( double)ia)/ 100.;

		ia = (mKillingRange * 100);
	 LabeledEdit7->Text  =(( double)ia)/ 100.;



	 createNibourAppointmPointPictureForCoastTarg(mwchOutFold,arrElK
		 , mFight.mTarget.mpArrPlanePolygon[0].mPolygon, mTargCourse0, VAlPsi);
 // построегие точек прицеливания

// TNeighbourhoodAppPoint::fncMilitaryPlannerForCoastTarg(
//  parrAimingPoints_X, piarrRepeatQuants_X,  iQuantAimingPoints_X
// ,parrAimingPoints_Y, piarrRepeatQuants_Y, iQuantAimingPoints_Y
//- ,ppntArrCorrecting);

 double  arrMtxPer0[4] = {0.};
 arrMtxPer0[0] = cos(mTargCourse0);
 arrMtxPer0[1] = -sin(mTargCourse0);
 arrMtxPer0[2] = -arrMtxPer0[1];
 arrMtxPer0[3] = cos(mTargCourse0);


 for (int i =0; i < mQuantShells; i++)
 {
   ppntArrCorrecting[i] = ppntArrCorrecting[i].fncLinTrasform(arrMtxPer0);
 }
	wchar_t wchFoldName[300] ={0}, wchFileAimingPoints[300] ={0}
	 ,wchFileLineDiagram_X[300] ={0} ,wchFileAxesDiagram_X[300] ={0}
	  ,wchFileLineDiagram_Y[300] ={0} ,wchFileAxesDiagram_Y[300] ={0} ;
	wcscpy(  wchFoldName,  mwchOutFold);
	wcscat(wchFoldName, L"\\");

	wcscpy(  wchFileAimingPoints,  wchFoldName);
	wcscat(wchFileAimingPoints, L"AimingPoints.shp");
	ppntArrCorrecting[0].WriteSetSHPFiles(wchFileAimingPoints,ppntArrCorrecting, mQuantShells) ;

	if(menumTypeOfControlAlgorithm == OPTIMAL)
	{
	//  создание линейчатых диаграмм частот точек прицеливания по осям X , Y
	  // создание диаграммы по оси X в СкСК цели
   TURPolyLine plnDiagr_X = TURPolyLine::createLineDiagram(
		 parrAimingPoints_X ,piarrRepeatQuants_X,iQuantAimingPoints_X);



   plnDiagr_X = plnDiagr_X.MultScalar(-1. );


	mFight.mTarget.mpArrPlanePolygon[0].mPolygon.calcBoundBox();
	plnDiagr_X.calcBoundBox();
	double valYMin0 =  plnDiagr_X.Box[1];
	double valYMin =  mFight.mTarget.mpArrPlanePolygon[0].mPolygon.Box[1];
	///

	// оси координат

	 TURPointXY pointBeginX(mFight.mTarget.mpArrPlanePolygon[0].mPolygon.Box[0] -10., 0.);
	 TURPointXY pointEndX(mFight.mTarget.mpArrPlanePolygon[0].mPolygon.Box[2] + 10., 0.);
	 TURPointXY pointBeginY(0., 0.);
	 TURPointXY pointEndY(0., valYMin0 - 10.);
	 TURPolyLine plnAxesX =  TURPolyLine::fncCreateAxes(pointBeginX, pointEndX
									   ,pointBeginY,  pointEndY,0.0001);
	 ///
	 TURPointXY pntSdvig (0., valYMin - 10.);

 double  arrMtxPer[4] = {0.};
 arrMtxPer[0] = cos(mTargCourse0);
 arrMtxPer[1] = -sin(mTargCourse0);
 arrMtxPer[2] = -arrMtxPer[1];
 arrMtxPer[3] = cos(mTargCourse0);

 plnDiagr_X = plnDiagr_X.SdvigTransform( pntSdvig );
 plnDiagr_X = plnDiagr_X.fncLinTransform(arrMtxPer ) ;



	 plnAxesX = plnAxesX.SdvigTransform( pntSdvig );
	 plnAxesX = plnAxesX.fncLinTransform(arrMtxPer ) ;
	wcscpy(  wchFileLineDiagram_X,  wchFoldName);
	wcscat(wchFileLineDiagram_X, L"LineDiagram_X.shp");
	plnDiagr_X.WriteSetSHPFiles(wchFileLineDiagram_X,&plnDiagr_X, 1) ;

	wcscpy(wchFileAxesDiagram_X,  wchFoldName);
	wcscat(wchFileAxesDiagram_X, L"Axes_X.shp");
	plnAxesX.WriteSetSHPFiles(wchFileAxesDiagram_X,&plnAxesX, 1) ;
	///

	 // создание диаграммы по оси Y в СкСК цели
   TURPolyLine plnDiagr_Y = TURPolyLine::createLineDiagram(
		 parrAimingPoints_Y ,piarrRepeatQuants_Y,iQuantAimingPoints_Y);



   plnDiagr_Y = plnDiagr_Y.MultScalar(-1. );


	mFight.mTarget.mpArrPlanePolygon[0].mPolygon.calcBoundBox();
	plnDiagr_Y.calcBoundBox();
	double valXMin0 =  plnDiagr_Y.Box[0];
	double valXMin =  mFight.mTarget.mpArrPlanePolygon[0].mPolygon.Box[0];
	///

	// оси координат

	 pointBeginX = TURPointXY(mFight.mTarget.mpArrPlanePolygon[0].mPolygon.Box[1] -10., 0.);
	 pointEndX = TURPointXY(mFight.mTarget.mpArrPlanePolygon[0].mPolygon.Box[3] + 10., 0.);
	 pointBeginY = TURPointXY(0., 0.);
	 pointEndY = TURPointXY(0., valXMin0 - 10.);
	 TURPolyLine plnAxesY =  TURPolyLine::fncCreateAxes(pointBeginX, pointEndX
									   ,pointBeginY,  pointEndY,0.0001);
	 ///
	 pntSdvig = TURPointXY(0., valXMin - 10.);


 arrMtxPer[0] = cos(mTargCourse0 -M_PI/2);
 arrMtxPer[1] = -sin(mTargCourse0 -M_PI/2);
 arrMtxPer[2] = -arrMtxPer[1];
 arrMtxPer[3] = cos(mTargCourse0 -M_PI/2);

 plnDiagr_Y = plnDiagr_Y.SdvigTransform( pntSdvig );
 plnDiagr_Y = plnDiagr_Y.fncLinTransform(arrMtxPer ) ;



	 plnAxesY = plnAxesY.SdvigTransform( pntSdvig );
	 plnAxesY = plnAxesY.fncLinTransform(arrMtxPer ) ;
	wcscpy(  wchFileLineDiagram_Y,  wchFoldName);
	wcscat(wchFileLineDiagram_Y, L"LineDiagram_Y.shp");
	plnDiagr_Y.WriteSetSHPFiles(wchFileLineDiagram_Y,&plnDiagr_Y, 1) ;

	wcscpy(wchFileAxesDiagram_Y,  wchFoldName);
	wcscat(wchFileAxesDiagram_Y, L"Axes_Y.shp");
	plnAxesY.WriteSetSHPFiles(wchFileAxesDiagram_Y,&plnAxesY, 1) ;
	///
 }

 //	 delete parrAimingPoints_X;
	 //delete piarrRepeatQuants_X;
 //	 delete parrAimingPoints_Y;
	// delete piarrRepeatQuants_Y;
	 delete []ppntArrCorrecting;
}



//----------------------------------------------------------------------------------------------
void __fastcall TForm2::fncInputData()
{
	mQuantShells = StrToInt(LabeledEdit1->Text);
	mQuantIspit = StrToInt(LabeledEdit2->Text);
	
	//if (wcschr(s_22.w_str(), L','))
 //	{


		// Цель
		// угол пеленга, град

		mBearing0 = StrTo_Dbl_(LabeledEdit23->Text) * M_PI / 180.;
		// высота, м
		mElev0 = 0.;

		// дальность, м



		 mDist0 = StrTo_Dbl_(ComboBox5->Text) * 1000.;
		 if (mDist0 > 22000.)
		 {
       mDist0 = 21000.;
		 }
	   
		//
		mTargZenitAng0 =  M_PI/2.;
		// угол курса
		mTargCourse0 = StrTo_Dbl_(LabeledEdit29->Text) * M_PI / 180.;

		///
		mVelocity0 = 0.01; // это сделано для тгго, чтобы  иметь возможность учитывать ориентацию положения цели в ГСК


		//mRateOfFire = StrTo_Dbl_(LabeledEdit49->Text) ;
		mAUDelayT = StrTo_Dbl_(LabeledEdit50->Text);


		mSigDrivAY_U  =  StrTo_Dbl_(LabeledEdit52->Text) / 1000.;
		mSigDrivAY_dU_po_dt  =  StrTo_Dbl_(LabeledEdit53->Text) / 1000.;

	//}
 //	else
	//{
		// ширинадиаграммы
		// mWidthDgr =  StrTo_Dbl_(LabeledEdit3->Text) * M_PI/3000./2. ;
 //	}


   //	LabeledEdit22->Text = mElev0 ;
   // АУ. определяет ShellBody (mEnumShellType). ShellBody определяет набор возможных детонаторов
	switch( ComboBox1->ItemIndex)
		{
			case 0:
			mEnumShellType = CALIBRO_130;
			menumCannonType = A_192M;
			LabeledEdit6->Text = 130;
			break;

			case 1:
			mEnumShellType = CALIBRO_100;
			menumCannonType = A_190_01;
			LabeledEdit6->Text = 100;
			ComboBox2->ItemIndex = 0;
			ComboBox3->ItemIndex = 0;

			break;

			default:
			mEnumShellType = CALIBRO_UNKNOWN;
			menumCannonType = CANNON_UNKNOWN;
			break;
		}


	///
		// тип взрывателя
		switch(ComboBox2->ItemIndex)
		{
			case 0:
			mDetonatorType = D4MRM;
			break;
			case 1:
			mDetonatorType = MFIVU;
			break;
			default:

			break;
		}

		///

		TDetonator Detonator (mDetonatorType);
		mShellBody = TShellBody(mEnumShellType, Detonator ) ;
		mArtCannon =  TArtCannon (menumCannonType, mAUDelayT )  ;
		mArtComplex  = TArtComplex (mArtCannon, 	mSigDrivAY_U , mSigDrivAY_dU_po_dt )  ;




	LabeledEdit49->Text =  mArtCannon.mRateOfFire;

	switch(ComboBox3->ItemIndex)
	{
	case 0:
	mEnumTargType = OPEN_MANPOWER_LIE;
	break;

	case 1:
	mEnumTargType = OPEN_MANPOWER_STAND;
	break ;

	case 2:
	mEnumTargType = 	BULLET_PROOF_LIE;
	break;

	case 3:
	mEnumTargType = BULLET_PROOF_STAND;
	break;

	case 4:
	mEnumTargType = COVERED_MANPOWER_ENTRENCH;
	break;

	case 5:
	mEnumTargType = COVERED_MANPOWER_TRENCH;
	break;

	case 6:
	mEnumTargType = MANPOWER_ARMOURED_CARRIER;
	break;

	case 7:
	mEnumTargType = MANPOWER_CAR;
	break;

	case 8:
	mEnumTargType = PLATOON_POINT ;
	break;
	default:
	break;
	}


	mInitTargData = TInitTargData(mBearing0, mTargCourse0, mTargZenitAng0,
		mVelocity0, mDist0, mElev0, 0.);
   const double TCur0 = 0.;
	double arrWSkz[3] = {0.};

	TTraject Traj0(TCur0,  arrWSkz, mInitTargData );
	TTarget Target(Traj0,mEnumTargType, mTargEPR, NULL) ;
	mVessel  =TVessel(        mShellBody, mFar_2D , mTransmitAnt
								, mDriverSigBet, mDriverSigEps, mDriverDynamicSigBet, mDriverDynamicSigEps
								, mMaxSig_Q,  mMaxSig_Psi,  mMaxSig_Tet, mMaxSig_dQdt,  mMaxSig_dPsidt, mMaxSig_dTetdt   // СИНС
								, mMaxSig_H, mMaxSig_VH, mK1, mSigV, mEnvironment
								, mVesselWidth , mVesselLength, marrFarParallacs, mMaxQ ,mT_Q
								, mMaxPsi, mT_Psi , mMaxTet, mT_Tet, mMaxVert,  mQ0, mVVess, mInitTargData
								, mMaxAmp_AftFlexure, mT_AftFlexure, mMaxAmp_BoardFlexure, mT_BoardFlexure
								,  mBius,marrArtParral, mArtComplex, NULL ) ;
	mFight = TFight( mVessel, Target ,mVessel.mBius.mFiltT,mEtalonSign,  mEnvironment, NULL ) ;


 LabeledEdit51->Text = double( int(mVessel.mArtComplex.mArtCannon.mAngGroupedFire * 100000.) )/ 100.;

	 mKillingRange = -1.;
	 if (mShellBody.mDetonator.mEnumDetonatorType == D4MRM )
	 {
			mKillingRange = sqrt( VAl_YZP_ForOpenManPower_Calibro130 /M_PI);
			if(mShellBody.mEnumShellType == CALIBRO_100)
			{
			mKillingRange  = sqrt( VAl_YZP_ForOpenManPower_Calibro100 /M_PI);
			}
	 }

	 if (mShellBody.mDetonator.mEnumDetonatorType == MFIVU )
	 {
		int index =  ( ComboBox3->ItemIndex) * 12 +  ( ComboBox5->ItemIndex)  * 4 +   ComboBox4->ItemIndex  ;
		mKillingRange =  sqrt(arrSPrived[index]);
	 }
}

//---------------------------------------------------------------------------------------

void __fastcall TForm2::Button4Click(TObject *Sender)
{
 OpenDialog1->Filter = L"файлы с графиками (*.shp)|*.shp" ;

	if (OpenDialog1->Execute())
	{
	mpwchOutFile0 =  (OpenDialog1->FileName).w_str();

	}
	Edit2->Text =  mpwchOutFile0;
}
//---------------------------------------------------------------------------


// ---------------------------------------------------------------------------

void __fastcall TForm2::create5P10()
{
   	//амплитуда
	 double valEtalonAmp = 500.;
	//дальность
	 double valEtalonDist = 12000.;
	//ЭПР
	 double valEtalonAPR = 1.;
	//СКО внутр шума суммарной диаграммы 5П10
	 double valNoiseSKZ_5P10 = 18.735;
	// СКЗ разброса коэффиц усиления суммарной диаграммы 5П10
	 double valEtalonSigAmplFact_5P10 = 0.01;
	//
	// мощность на передачу
	 double valEtalonPowerPrd = 4000.;
	// КУ на передачу
	 double valEtalonKYPrd = 840.;
	// мощность на прием
	 double valEtalonKYPriem = 5200.;

	 mEtalonSign = TEtalonSign( valEtalonAmp, valEtalonDist,  valEtalonAPR,
			 valNoiseSKZ_5P10, valEtalonSigAmplFact_5P10, valEtalonPowerPrd,  valEtalonKYPrd
			,  valEtalonKYPriem);

	///

	// АНТЕННА
	// данные по АМ
	// к-во излучателей по горизонтали
	 int iNumEmitCols = 8;
	// к-во излучателей по вертикали
	 int iNumEmitRows = 8;
		// длина волны
		double valLambda = VAL_C / 8.* 100. / 1000000000.;

			// расстояние между излучателями
		double valdEmitCol = valLambda * 0.55;
		double valdEmitRow = valLambda * 0.55;


	// данные по ФАР
	// к-во АМ  по горизонтали
	 int iNumAMCols = 8;
	// к-во АМ по вертикали
	 int iNumAMRows = 8;
		// расстояние между АМ по вериткали
	double valdAMRow = ((double)iNumEmitRows) *  valdEmitRow;
	// расстояние между АМ по горизонтали
	double valdAMCol = ((double)iNumEmitCols) *  valdEmitCol;
	// СКЗ шума в суммарной диаграмме
	bool barrAM [5000] = {0};
	 for (int i = 0; i < 5000; i++)
	{
		barrAM[i] = true;
	}


//	double arrArtParral[3] ={0.},  arrFarParallacs[3] ={0.};



	// мощность на передачу
	 double valPowerPrd =4000.;
	// КУ на передачу
	 double valKYPrd = 3000.;
	 mTransmitAnt.mKYPrd  =valKYPrd;
	 mTransmitAnt.mPowerPrd = valPowerPrd;


	///

const double SigEmitNoise =  valNoiseSKZ_5P10 / sqrt(((double)(8 * 16 * 28)));
	const double SigEmitAmplFact = valEtalonSigAmplFact_5P10 / sqrt
		(((double)(8 * 16 * 28)));
 TAM_2D AM_2D(iNumEmitCols, iNumEmitRows,  valdEmitCol,  valdEmitRow,
		SigEmitNoise, SigEmitAmplFact);

	mFar_2D = TFar_2D(iNumAMCols, iNumAMRows,  valLambda,  valdAMCol,  valdAMRow,
		AM_2D, barrAM);

	for (int i = 0; i < iNumAMCols * iNumAMRows; i++) {

		if (!barrAM[i]) {
			mFar_2D.mpAm2D[i].mOtklCoefUs = 1.;
			mFar_2D.mpAm2D[i].mSigEmitNoise = 0.;
		}
	}


	//-------------------------------------------------------------------
	// СКЗ угловой ошибки СИНС (углов качек)
	mSigSins = 0.00041;

	// СКЗ угловой ошибки СИНСпо скорости углов (углов качек)
	mSig_d_po_dt_Sins = 0.00116;

	// корабль наш
	 mVesselWidth = 0.; // ширина(м)
	 mVesselLength = 0. ;

	mMaxQ =     3./180.*M_PI; /// максимальный угол отклонения от генерального курса(амплитуда угла рыскания)
	mT_Q = 18.; // период рыскания
	mMaxPsi =      3./180.*M_PI;// максимальный угол килевой качки(амплитуда)
	mT_Psi = 12; // период килевой качки
	mMaxTet =      12./180.*M_PI; //максимальный угол боротовой качки(амплитуда)
	mT_Tet = 6; // период бортовой качки
	mMaxVert =     1. ;

	// парамеитры движения  корабля нашего
	 mQ0 = 0. ; // генеральный курс
	 mVVess = 20. * 0.514 ;// скорость корабля своего 20 узлов
 //	 double arrDelt[4] = {0.};


	mMaxAmp_AftFlexure  = 1. * M_PI/180.;
	// период колебаний кормового изгиба
	mT_AftFlexure = 4.;
	//максимальная амплитуда бортового изгиба корабля в рад на 100 м
	mMaxAmp_BoardFlexure =  1. * M_PI/180.;
	// период колебаний бортового изгиба
	mT_BoardFlexure = 2.;

		 // 3.1 создание СИНС
	mMaxSig_Q      =     mSigSins ; //0.000582;
	mMaxSig_Psi    =      mSigSins ; //0.00145;
	mMaxSig_Tet    =    mSigSins ; // 0.00145;
	mMaxSig_dQdt   =      mSig_d_po_dt_Sins ;
	mMaxSig_dPsidt =      mSig_d_po_dt_Sins ;
	mMaxSig_dTetdt =      mSig_d_po_dt_Sins ;
	mK1         = 0.01 ;
	mSigV       =      0.2 * sqrt(2.) ;
	mSigH       =      0.1 ;
	mMaxSig_H =     0.1 ;
	mMaxSig_VH =     0.05 ;

    	// 3.3 создание привода
	mDriverSigBet  =      0.00021 ;
	mDriverSigEps  =      0.00021 ;
	mDriverDynamicSigBet =      0.0003141;
	mDriverDynamicSigEps =      0.0003141;

		// интервал между измерениями
	mMeasT = 0.02;

	// Задержка СИНС
	mSinsDelayT = 0.02;

		mBius = TBius(mMeasT, mSinsDelayT );
}
void __fastcall TForm2::Panel3Click(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::ComboBox3Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::ComboBox1Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::ComboBox2Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::ComboBox4Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::ComboBox5Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit23Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit29Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit1Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit2Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit49Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit51Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit52Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit53Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LabeledEdit50Change(TObject *Sender)
{
fncInputData();
}
//---------------------------------------------------------------------------



void __fastcall TForm2::RadioGroup2Click(TObject *Sender)
{
	switch(RadioGroup2->ItemIndex)
	{
		case 0:
		menumTypeOfControlAlgorithm = OPTIMAL;
		break;

		case 1:
		menumTypeOfControlAlgorithm = STANDART;
		break;

		default:
		break;

  }

}
//---------------------------------------------------------------------------

