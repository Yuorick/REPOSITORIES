//---------------------------------------------------------------------------


#pragma hdrstop

#include "Veer4.h"
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include "YrWriteShapeFile.h"
#include "URPolyLine.h"
#include "UrPointXY.h"
#include "DiagrSinX.h"
#include "MatrixProccess.h"

_fastcall  TVeer4 ::TVeer4()
{
  mTang = 60.;;
 // угол сканирования разностной диаграммы
  mScnDif = 5. * 3000./ M_PI;
 // понижающий коэфф суммарнй диаграммы
  mKSum = 0.9;
 //угол сканирования суммарной диаграммы
  mScnSum = 10. * 3000./ M_PI;
 // коэффиц растяжения суммарной диаграммы
   mTension = 127.;

}
// Конструктор копирования
__fastcall  TVeer4::TVeer4 (const TVeer4 &R)
 {
	mTang =  R.mTang;
	// угол сканирования разностной диаграммы
	mScnDif = R.mScnDif;
	// понижающий коэфф суммарнй диаграммы
	mKSum = R.mKSum;
	//угол сканирования суммарной диаграммы
	mScnSum = R.mScnSum;
	// коэффиц растяжения суммарной диаграммы
	mTension = R.mTension;
 }
// оператор присваивания
  TVeer4 TVeer4::operator=(TVeer4  R)
 {
	mTang =  R.mTang;
	// угол сканирования разностной диаграммы
	mScnDif = R.mScnDif;
	// понижающий коэфф суммарнй диаграммы
	mKSum = R.mKSum;
	//угол сканирования суммарной диаграммы
	mScnSum = R.mScnSum;
	// коэффиц растяжения суммарной диаграммы
	mTension = R.mTension;
	 return *this ;
 }

 // парам констр
 __fastcall TVeer4::TVeer4(const double Tang, const double ScnDif, const double KSum
	   , const double ScnSum, const double Tension )
 {
	 mTang = Tang ;
	 mScnDif = ScnDif;
	 mKSum = KSum ;
	 mScnSum =ScnSum ;
	 mTension = Tension ;
 }

//--------------------------------------------------------------------------------------
// Нахождение оптимальных углов цели и антипода
//
// INPUT:
// pSDifZv[2]   - массив измерений по разностным диаграммам (комплексные числа)
// pSSumZv[2]   - массив измерений по суммарным диаграммам (комплексные числа)
// ZTarg -  коэффициент отражения цели нач значение
// ZAnt   - коэффициент отражения  антипода  нач значение
// *alfTrg  - УМ цели   нач значение
// *alfAnp  - УМ антипода  нач значение
// OUTPUT:
// ZTarg -  коэффициент отражения цели
// ZAnt   - коэффициент отражения  антипода
// *alfTrg  - УМ цели
// *alfAnp  - УМ антипода
// возвращает:
// -2 - еслти матрица якоби вырождена
// -3 - Если метод не сошелся

int _fastcall TVeer4::solv4(TComp *pSDifZv,TComp *pSSumZv, TComp *pZTarg, TComp *pZAnt, double *palfTrg, double *palfAnp )
{
  int i = 0;
  double arr_FGreek[2] ={0.},arr_dFGreek[4] ={0.},arr_dFGreekInv[4] ={0.} ;
  double arrX[2] ={0.}, arrXT[2] ={0.}; // вектор с решениями
  arrX[0] = *palfTrg ;
  arrX[1] = *palfAnp;
  double del = -2.;

  for (i = 0; i < 100; i++)
  {

	double arr_F00[2] ={0.},arr_dF00[4] ={0.}, arrDelX[2] ={0.} ;

  //	calc_FGr_and_dFGr_po_dAlf ( pcmpSZv, ZTarg,  ZAnt, arrX[0], arrX[1] , arr_FGreek, arr_dFGreek ) ;
	///

	if(!InverseMtrx2(arr_dFGreek, arr_dFGreekInv))
	{
	 *palfTrg = arrX[0]   ;
	 *palfAnp = arrX[1]  ;
	 return -2;
	}
	MtrxMultMatrx(arr_dFGreekInv ,2, 2, arr_FGreek,1, arrDelX) ;
	del = NormVect(arrDelX, 2);
	double arrT[2] ={0.};
	MtrxMinusMatrx(arrX, arrDelX,1, 2, arrXT) ;
	memcpy( arrX, arrXT, 2 * sizeof(double));
	if (del< 0.00000001)
	{

	  *palfTrg = arrX[0]   ;
	  *palfAnp = arrX[1]  ;
	  return 0;
	}
 }

  return -3;

}


int _fastcall TVeer4::calc_FGr_and_dFGr_po_dAlf (TComp *pSDifZv,TComp *pSSumZv
		,  double alfTrg, double alfAnp )
{
	return 0;
}
#pragma package(smart_init)
