//---------------------------------------------------------------------------


#pragma hdrstop
#include <math.h>
#include <stdlib.h>
#include <string.h>
#include "Faceta.h"
#include "Comp.h"
#include <stdio.h>
#include <stdlib.h>
#include "YrWriteShapeFile.h"
#include "URPolyLine.h"
#include "UrPointXY.h"
#include "DiagrSinX.h"

extern const double TET0707;

__fastcall  TFaceta ::TFaceta()
{
  // количество излучателей в фасете
  m_n = 32;
 // расстояние между излучателями в модуле
  m_d = 2 ;
 // длина волны
  mLambda = 3.15;
}
// Конструктор копирования
__fastcall  TFaceta::TFaceta (const TFaceta &R2)
 {
	 m_n = R2.m_n ;
	 m_d= R2.m_d;
	 mLambda = R2.mLambda ;
 }
 // парам констр
 __fastcall TFaceta::TFaceta(const int n,const double d,const double Lambda)
 {
	 m_n = n ;
	 m_d= d;
	 mLambda = Lambda ;
 }

// оператор присваивания
  TFaceta TFaceta::operator=(TFaceta  R2)
 {
	 m_n = R2.m_n ;
	 m_d= R2.m_d;
	 mLambda = R2.mLambda ;
	 return *this ;
 }


 // функция диаграммы источника
 double  TFaceta::fncFSource (const double valTetta)
 {
	 return sqrt(fabs(cos(valTetta)));
 }
  //---------------------------------------------------------
 // функция производной  диаграммы источника
 double  TFaceta::fnc_dFSource_po_dTetta (const double valTetta)
 {
	 if ((fabs(valTetta) -M_PI/ 2.) <=0.)
	 {
	  return - sin (valTetta)/fncFSource (valTetta)/2.;
	 }
	 return sin (valTetta)/fncFSource (valTetta)/2.;
 }
  //---------------------------------------------------------

 // функция  производной диаграммы фасеты
 double  TFaceta::fnc_dFFaceta_po_dTet (const double tet)
 {
  double valk = 2. * M_PI / mLambda;
double alf = valk * m_d * ((double)m_n)/ 2.;
double bet = valk * m_d / 2.;

 if (fabs(tet)< 0.0000001) return 0.;


 double val_F1 = fncFSource (tet);
double val_dF1 = fnc_dFSource_po_dTetta (tet) ;

double f31 = fnc_F3( alf,  tet)  ;
double f32 = fnc_F3( bet,  tet)  ;


double val_F21 = f31/ f32;


double a1 =  fnc_dF3_po_tet(alf,   tet) ;
double a2 =  fnc_dF3_po_tet(bet,   tet) ;


double val_dF21_po_dTet =  fnc_F4(f31 ,f32, a1, a2) ;


return ( val_dF1 *  val_F21  + val_F1 * val_dF21_po_dTet )/ ((double ) m_n);
 }
  //---------------------------------------------------------
double  TFaceta::fncFFaceta (const double tet)
{

  if (fabs(tet)< 0.0000001) return 1.;
    double valk = 2. * M_PI / mLambda;
double alf = valk * m_d * ((double)m_n)/ 2.;
double bet = valk * m_d / 2.;
  double temp = sqrt(cos(tet))* sin( alf * sin(tet) )
		   /(((double)m_n)* sin( bet * sin(tet) )) ;

  return temp  ;
}
 //
  //---------------------------------------------------------
 double TFaceta::fnc_dF3_po_tet(const double val_gam, const double tet)
{
   return cos(val_gam * sin(tet) ) * val_gam * cos(tet);
}
  //---------------------------------------------------------
/// F3 = sin(gam(sin(tet)-mu) -
double TFaceta::fnc_F3(const double val_gam, const double tet)
{
   return sin(val_gam * sin(tet) );
}

double TFaceta::fnc_F4(const double v,const  double u, const double v1,const  double u1)
{
   return (v1 * u - u1 * v)/ u / u;
}

//-----------------------------------------------------------------

double TFaceta::findDiagrWidth()
{
 //double tet0 = 0.02;
 double tet0 = mLambda/m_d/ m_n * 0.75;

 int i =0;
 double a = sqrt(2.)/2.;
 for ( i =0; i < 10; i++)
 {
  double del = -(fncFFaceta ( tet0) - a)/ fnc_dFFaceta_po_dTet ( tet0);
  tet0 += del;
  if (fabs(del) < 0.0000001) break;

 }

 double vala = 2. * M_PI / mLambda * m_d * ((double)m_n)/ 2.;
 double tet1 = TET0707 / vala;
 return tet0;
}


void TFaceta::createDiagrGraphs(wchar_t *wchFoldName1 )
{

 wchar_t wchFoldName[300] ={0};
  wcscpy(  wchFoldName,  wchFoldName1);
  wcscat(wchFoldName, L"\\");
  double step = M_PI / 3000./ 10.;
  //const int nBuffRows = 470 *2;
   const int nBuffRows = 1500 *2;
  const int nBuffCols =3;
  double  *parrBuff = new double [nBuffRows  * nBuffCols] ;
  memset(parrBuff, 0, nBuffRows * nBuffCols * sizeof(double));

  const int lenName = 30;
  wchar_t wcharrFileNames [150] ={0};
  wcscpy( wcharrFileNames, L"Tetta");
  wcscpy( &wcharrFileNames[30], L"F");
  wcscpy( &wcharrFileNames[60], L"SinxF");
 // wcscpy( &wcharrFileNames[90], L"ParDiagr1");
  //wcscpy( &wcharrFileNames[120], L"ParDiagr2");
  double valWidthDgr = findDiagrWidth() ;
  //DiagrWidth( val_d, val_D,  ival_n   ,  ival_N, valLamb);
  for (int i=0 ; i < nBuffRows; i++)
  {
   if (i == 470)
   {
	 int iii = 0;
   }
   parrBuff[ i * nBuffCols] = ((double) (-nBuffRows/2 +i)) / 10.;
   double tet = step * ((double) (-nBuffRows/2 +i));
   parrBuff[ i * nBuffCols + 1]= fncFFaceta( tet)   ;
   parrBuff[ i * nBuffCols + 2]= fncDiagrSimple(valWidthDgr, tet * 1000.)   ;
  /* parrBuff[ i * nBuffCols + 2]=fncDiagrPar( val_d, val_D,  ival_n
  ,  ival_N,valLamb,0., tet);
   parrBuff[ i * nBuffCols + 3]=fncDiagrPar( val_d, val_D,  ival_n
  ,  ival_N,valLamb,valWidthDgr/2., tet);
   parrBuff[ i * nBuffCols + 4]=fncDiagrPar( val_d, val_D,  ival_n
  ,  ival_N,valLamb,valWidthDgr, tet); */

  }

  double scaley = 100.;
  for (int i=1; i < nBuffCols; i++)
  {


  TYrWriteShapeFile::WriteOneReport(                 wchFoldName  // путь к папке
								  , parrBuff // массив с информацией - матрица nBuffRows x nBuffCols
								  , nBuffCols // - к-во переменных о корорых накоплена информация в буфере
								  , nBuffRows //  - к-во точек
								  ,wcharrFileNames //матрица с именаими переменных - матрица nBuffCols x lenName
								  ,lenName // максимальная длина имени переменной
								  ,0  // номер переменной по оси X
								  ,i  // номер переменной по оси Y
								  ,1. //  масштаб по оси X
								  ,scaley // масштаб по оси Y
								   ) ;
  }

delete parrBuff;
 wchar_t wchAxesFileName[300] ={0};
  wcscpy(  wchAxesFileName,  wchFoldName);
  wcscat(wchAxesFileName, L"AxesArr.shp");
TYrWriteShapeFile::CreateShpArrowedAxes(wchAxesFileName,-parrBuff[ (nBuffRows-1) * nBuffCols]-100000.*step, parrBuff[ (nBuffRows-1) * nBuffCols]+100000.*step
	 ,0,scaley * 1.1, 50000.*step) ;
TURPointXY pPoints[2];
pPoints[0] =  TURPointXY (-100., scaley * sqrt(2.)/2.);
pPoints[1] =  TURPointXY (100., scaley * sqrt(2.)/2.);
TURPolyLine pln( pPoints,2) ;

  wcscpy(  wchAxesFileName,  wchFoldName);
  wcscat(wchAxesFileName, L"Line0.shp");
TURPolyLine::WriteSetSHPFiles(wchAxesFileName,&pln, 1) ;
 }

 // приблтженный расчет ширины диаграммы через sinx/x
 double TFaceta::findDiagrWidthApprox()
{
 double vala = 2. * M_PI / mLambda * m_d * ((double)m_n)/ 2.;
 double tet1 = TET0707 / vala;
 return tet1;
}

double  TFaceta::fncFFacetaApprox (const double valTetta)
{
	double valWidth = findDiagrWidthApprox();
	return fncDiagrSimple(valWidth, valTetta * 1000.)

}
double  TFaceta::fnc_dFFacetaApprox_po_dTet (const double tet)
{
	double valWidth = findDiagrWidthApprox();
	return fncDerivDiagrSimple(valWidth, valTetta * 1000.);

}

// иторая производная диаграмма sin(ax)/ax
double TFaceta::fnc_d2FFacetaApprox_po_dTet2(const double tet)
{
double coeff =  TET0707 / valWidthDgr/ 1000.;
return fncDeriv2DiagrSimple(valWidth, valTetta * 1000.);
}
#pragma package(smart_init)

