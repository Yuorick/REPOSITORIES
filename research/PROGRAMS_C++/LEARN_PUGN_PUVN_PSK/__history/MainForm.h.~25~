//---------------------------------------------------------------------------

#ifndef MainFormH
#define MainFormH
//---------------------------------------------------------------------------
#include <Classes.hpp>
#include <Controls.hpp>
#include <StdCtrls.hpp>
#include <Forms.hpp>
//---------------------------------------------------------------------------
#include "URPointZ.h"
#include "Environment.h"
#include "MyShellTraj.h"
#include "LearnShellBody.h"
//#include "URPolyLine.h"
#include <Dialogs.hpp>
#include <ExtCtrls.hpp>
//---------------------------------------------------------------------------
 class URPolyLine;
 class TFar_2D;
class TForm1 : public TForm
{
__published:	// IDE-managed Components
	TOpenDialog *OpenDialog1;
	TPanel *Panel9;
	TOpenDialog *OpenDialog2;
	TPanel *Panel1;
	TEdit *Edit1;
	TLabel *Label1;
	TButton *Button3;
	TButton *Button4;
	TLabeledEdit *LabeledEdit1;
	TOpenDialog *OpenDialog3;
	TLabeledEdit *LabeledEdit2;
	TLabeledEdit *LabeledEdit3;
	TPanel *Panel2;
	TLabeledEdit *LabeledEdit15;
	TButton *Button2;
	TLabel *Label2;
	TLabel *Label3;
	TPanel *Panel4;
	TLabel *Label4;
	TButton *Button6;
	TLabeledEdit *LabeledEdit4;
	TLabeledEdit *LabeledEdit5;
	TLabeledEdit *LabeledEdit10;
	TComboBox *ComboBox4;
	TLabel *Label14;
	TLabeledEdit *LabeledEdit16;
	TPanel *Panel3;
	TButton *Button1;
	TButton *Button5;
	TEdit *Edit2;
	TLabel *Label5;
	TPanel *Panel5;
	TLabel *Label6;
	TLabeledEdit *LabeledEdit7;
	TLabeledEdit *LabeledEdit6;




	void __fastcall Button2Click(TObject *Sender);
	void __fastcall Button3Click(TObject *Sender);
	void __fastcall Button4Click(TObject *Sender);
	void __fastcall Button6Click(TObject *Sender);
	void __fastcall Button1Click(TObject *Sender);
	void __fastcall Button5Click(TObject *Sender);
   //	void __fastcall Button7Click(TObject *Sender);
private:	// User declarations
public:		// User declarations
	__fastcall TForm1(TComponent* Owner);


	// путь к файлу с условиями точки встречи
	wchar_t *mpwchOutFileAppointmentPoints;


	// путь к папке с нрафиками
	wchar_t *mpwchOutFile0;
	// путь к папке с графиками  результатов расчета диаграмм
	wchar_t mwchOutFold[400]; //



		// путь к папке с нрафиками  траектории и разбросов
	wchar_t *mpwchOutFileTraj0;
	wchar_t mpwchOutFileTraj[400];

   // csv файл с таблицей
   wchar_t mpwchTableFile[400];
   //	wchar_t *mpwchTableFile0;

	// директория с графиками
	wchar_t mpwchGraphDir[400];
	wchar_t *mpwchGraphDir0;

	// директория с графиками  дисперсий
	wchar_t mpwchDispGraphDir[400];
	wchar_t *mpwchDispGraphDir0;
	//тип взрывателя
   //	enumDetonatorType mDetonatorType;
	enumShellType mEnumShellType;
   //Рассеяние АУ
   double mSigTechAU;
	//
	//к-во снарядов
   //	int mQuantShells;
	// Начальная дальность стрельбы
   //	double mFireBegin;
	//Конечная дальность стрельбы
   //	double mFireFinish;
	///
	// коэффиц сигнала антипода (модуль сигнала антипода, деленный на модуль сигнала цели)
	// double mAntCoeff;

	// Цель

	//тип цели
   //	enumTargetType  mEnumTargType;
	//угол пеленга, град
  //	double mBearing0;
	//высота, м
  //	double mElev0;
	//скорость, м/с
  //	double mVelocity0;
	//дальность, м
 //	double mDist0;

	//скз шума движения, м/с/с
  //	double mWSkz;
	//
   //	double mTargZenitAng0;
	//угол курса
  //	double mTargCourse0;
	// ЭПР цели
   //	double mTargEPR ;

	// задержка в работе АУ
   //	double mAUDelayT;

	// арткомплекс
	// темп стрельбы
  //	double mRateOfFire;

	// 	точногсть отработки привода углов
  //	double  mSigDrivAY_U ;

	// 	точногсть отработки приводом скорости  углов
   //	double  mSigDrivAY_dU_po_dt ;

	// СКЗ угловой ошибки СИНС (углов качек)
   //	double	mSigSins;

	// СКЗ угловой ошибки СИНСпо скорости углов (углов качек)
  //	double	mSig_d_po_dt_Sins;

	// корабль наш
  //	double mVesselWidth ; // ширина(м)
  //	double mVesselLength ;
  //	double marrFarParallacs[3] ;

  //	double mMaxQ ; /// максимальный угол отклонения от генерального курса(амплитуда угла рыскания)
  //	double mT_Q; // период рыскания
  //	double mMaxPsi ;// максимальный угол килевой качки(амплитуда)
   //	double mT_Psi ; // период килевой качки
   //	double mMaxTet ; //максимальный угол боротовой качки(амплитуда)
   //	double mT_Tet; // период бортовой качки
   //	double mMaxVert  ;

	// парамеитры движения  корабля нашего
  //	double mQ0  ; // генеральный курс
   //	double mVVess  ;// скорость корабля своего 20 узлов
   //	double marrDelt[4] ;//  начальные фазы

	//максимальная амплитуда кормового изгиба корабля в рад на 100 м
  //	double mMaxAmp_AftFlexure;
	// период колебаний кормового изгиба
 //	double mT_AftFlexure;
	//максимальная амплитуда бортового изгиба корабля в рад на 100 м
   //	double mMaxAmp_BoardFlexure;
	// период колебаний бортового изгиба
  //	double mT_BoardFlexure;

	// 3.1 создание СИНС
  //	TSins mSins ;
   //	double mMaxSig_Q ;
   //	double mMaxSig_Psi  ;
  //	double mMaxSig_Tet  ;
   //	double mMaxSig_dQdt ;
   //	double mMaxSig_dPsidt ;
   //	double mMaxSig_dTetdt ;
   //	double mK1         ;
	//double mSigV      ;
  //	double mSigH     ;
  //	double mMaxSig_H ;
  //	double mMaxSig_VH ;
	// тип алгоритма фильтрации


	// привод
 //	double mDriverSigBet ;// точность измерения угла Bet привода
 //	double mDriverSigEps ;// точность измерения угла Eps  привода (угла места)
 //	double mDriverDynamicSigBet ;// точность отработки угла курса  привода
 //	double mDriverDynamicSigEps ;// точность  привода отработки угла места

	//
   //	 double marrArtParral[3]; // вектор параллакса АУ
	//Темп фильтрации
	// интервал между измерениями
   //	double mMeasT;

	// Задержка СИНС
  //	double mSinsDelayT;
   // темп решения РЗВ
  //double mRzvT;

   //	TControlSyst mControlSyst;
   //	TFar_2D mFar_2D;
  //	TArtCannon mArtCannon ;
   //	TArtComplex mArtComplex;  // АУ
   //	TTransmitAnt mTransmitAnt;
  //	TEtalonSign mEtalonSign;
   //	TVessel mVessel;
   //	TFight mFight;
	TEnvironment mEnvironment;
   //	TInitTargData mInitTargData;
	TShellBody mShellBody;

	TLearnShellBody mLearnShellBody;

	// ПЕРЕМЕННЫЕ НУЖНЫЕ ДЛЯ ПОСТРОЕНИЯ ГРАФИКОВ
	bool mbCalculated; // признак того, что произведен расчет
   //	double mparrProbab[ILenArr];  // массив вероятн7остей поражения для каждого выстрела
   //	double mparrSKZPromach [ILenArr]; // массив СКЗ промаха
  //	double mparrSKZNedolet [ILenArr]; // массив СКЗ промаха
  //	double mparrSKZ_GSK_Z [ILenArr]; //  массив дисперсий разброса промаха по оси Z ГСК
   //	double mparrCorMtrxCartinSK  [ILenArr * 4]; // массив корреляц матриц вектора промаха в картинной плоскости
  //	double mparrDist[ILenArr]; // массив дальностей точек встречи
  //	TURPolygon mpPlgArrProjection  [ILenArr];  // массив проекций полигонов цели на картинную плоскость
  //	int mQuantShots ;       // к-во выстрелов
   //	int mNumShot;// номер выстрела для которого надо строить изображение района точки встречи
				 // в картинной плоскости

	void __fastcall fncInputData();
	TFar_2D __fastcall create5P10();
};
//---------------------------------------------------------------------------
extern PACKAGE TForm1 *Form1;
//---------------------------------------------------------------------------
#endif
